{"version":3,"file":"otpus.min.js","sources":["../lib/fast-sha256.js","../../meta-buffer-pack/node_modules/base64-js/index.js","../../meta-buffer-pack/node_modules/ieee754/index.js","../../meta-buffer-pack/node_modules/buffer/index.js","../../meta-buffer-pack/src/meta-buffer-pack.js","../src/otpus-sha256.js","../node_modules/base64-js/index.js","../src/otpus-util.js","../src/otpus.js"],"sourcesContent":["// SHA-256 (+ HMAC and PBKDF2) for JavaScript.\n//\n// Written in 2014-2016 by Dmitry Chestnykh.\n// Public domain, no warranty.\n//\n// Functions (accept and return Uint8Arrays):\n//\n//   sha256(message) -> hash\n//   sha256.hmac(key, message) -> mac\n//   sha256.pbkdf2(password, salt, rounds, dkLen) -> dk\n//\n//  Classes:\n//\n//   new sha256.Hash()\n//   new sha256.HMAC(key)\n//\nexport var digestLength = 32\nexport var blockSize = 64\n// SHA-256 constants\nconst K = new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,\n  0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,\n  0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,\n  0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,\n  0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,\n  0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,\n  0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,\n  0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,\n  0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,\n  0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n])\nfunction hashBlocks (w, v, p, pos, len) {\n  let a, b, c, d, e, f, g, h, u, i, j, t1, t2\n  while (len >= 64) {\n    a = v[0]\n    b = v[1]\n    c = v[2]\n    d = v[3]\n    e = v[4]\n    f = v[5]\n    g = v[6]\n    h = v[7]\n    for (i = 0; i < 16; i++) {\n      j = pos + i * 4\n      w[i] = (((p[j] & 0xff) << 24) | ((p[j + 1] & 0xff) << 16) |\n                ((p[j + 2] & 0xff) << 8) | (p[j + 3] & 0xff))\n    }\n    for (i = 16; i < 64; i++) {\n      u = w[i - 2]\n      t1 = (u >>> 17 | u << (32 - 17)) ^ (u >>> 19 | u << (32 - 19)) ^ (u >>> 10)\n      u = w[i - 15]\n      t2 = (u >>> 7 | u << (32 - 7)) ^ (u >>> 18 | u << (32 - 18)) ^ (u >>> 3)\n      w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0)\n    }\n    for (i = 0; i < 64; i++) {\n      t1 = (((((e >>> 6 | e << (32 - 6)) ^ (e >>> 11 | e << (32 - 11)) ^\n                (e >>> 25 | e << (32 - 25))) + ((e & f) ^ (~e & g))) | 0) +\n                ((h + ((K[i] + w[i]) | 0)) | 0)) | 0\n      t2 = (((a >>> 2 | a << (32 - 2)) ^ (a >>> 13 | a << (32 - 13)) ^\n                (a >>> 22 | a << (32 - 22))) + ((a & b) ^ (a & c) ^ (b & c))) | 0\n      h = g\n      g = f\n      f = e\n      e = (d + t1) | 0\n      d = c\n      c = b\n      b = a\n      a = (t1 + t2) | 0\n    }\n    v[0] += a\n    v[1] += b\n    v[2] += c\n    v[3] += d\n    v[4] += e\n    v[5] += f\n    v[6] += g\n    v[7] += h\n    pos += 64\n    len -= 64\n  }\n  return pos\n}\n// Hash implements SHA256 hash algorithm.\nconst Hash = /** @class */ (function () {\n  function Hash () {\n    this.digestLength = digestLength\n    this.blockSize = blockSize\n    // Note: Int32Array is used instead of Uint32Array for performance reasons.\n    this.state = new Int32Array(8) // hash state\n    this.temp = new Int32Array(64) // temporary state\n    this.buffer = new Uint8Array(128) // buffer for data to hash\n    this.bufferLength = 0 // number of bytes in buffer\n    this.bytesHashed = 0 // number of total bytes hashed\n    this.finished = false // indicates whether the hash was finalized\n    this.reset()\n  }\n  // Resets hash state making it possible\n  // to re-use this instance to hash other data.\n  Hash.prototype.reset = function () {\n    this.state[0] = 0x6a09e667\n    this.state[1] = 0xbb67ae85\n    this.state[2] = 0x3c6ef372\n    this.state[3] = 0xa54ff53a\n    this.state[4] = 0x510e527f\n    this.state[5] = 0x9b05688c\n    this.state[6] = 0x1f83d9ab\n    this.state[7] = 0x5be0cd19\n    this.bufferLength = 0\n    this.bytesHashed = 0\n    this.finished = false\n    return this\n  }\n  // Cleans internal buffers and re-initializes hash state.\n  Hash.prototype.clean = function () {\n    for (var i = 0; i < this.buffer.length; i++) {\n      this.buffer[i] = 0\n    }\n    for (var i = 0; i < this.temp.length; i++) {\n      this.temp[i] = 0\n    }\n    this.reset()\n  }\n  // Updates hash state with the given data.\n  //\n  // Optionally, length of the data can be specified to hash\n  // fewer bytes than data.length.\n  //\n  // Throws error when trying to update already finalized hash:\n  // instance must be reset to use it again.\n  Hash.prototype.update = function (data, dataLength) {\n    if (dataLength === void 0) { dataLength = data.length }\n    if (this.finished) {\n      throw new Error(\"SHA256: can't update because hash was finished.\")\n    }\n    let dataPos = 0\n    this.bytesHashed += dataLength\n    if (this.bufferLength > 0) {\n      while (this.bufferLength < 64 && dataLength > 0) {\n        this.buffer[this.bufferLength++] = data[dataPos++]\n        dataLength--\n      }\n      if (this.bufferLength === 64) {\n        hashBlocks(this.temp, this.state, this.buffer, 0, 64)\n        this.bufferLength = 0\n      }\n    }\n    if (dataLength >= 64) {\n      dataPos = hashBlocks(this.temp, this.state, data, dataPos, dataLength)\n      dataLength %= 64\n    }\n    while (dataLength > 0) {\n      this.buffer[this.bufferLength++] = data[dataPos++]\n      dataLength--\n    }\n    return this\n  }\n  // Finalizes hash state and puts hash into out.\n  //\n  // If hash was already finalized, puts the same value.\n  Hash.prototype.finish = function (out) {\n    if (!this.finished) {\n      const bytesHashed = this.bytesHashed\n      const left = this.bufferLength\n      const bitLenHi = (bytesHashed / 0x20000000) | 0\n      const bitLenLo = bytesHashed << 3\n      const padLength = (bytesHashed % 64 < 56) ? 64 : 128\n      this.buffer[left] = 0x80\n      for (var i = left + 1; i < padLength - 8; i++) {\n        this.buffer[i] = 0\n      }\n      this.buffer[padLength - 8] = (bitLenHi >>> 24) & 0xff\n      this.buffer[padLength - 7] = (bitLenHi >>> 16) & 0xff\n      this.buffer[padLength - 6] = (bitLenHi >>> 8) & 0xff\n      this.buffer[padLength - 5] = (bitLenHi >>> 0) & 0xff\n      this.buffer[padLength - 4] = (bitLenLo >>> 24) & 0xff\n      this.buffer[padLength - 3] = (bitLenLo >>> 16) & 0xff\n      this.buffer[padLength - 2] = (bitLenLo >>> 8) & 0xff\n      this.buffer[padLength - 1] = (bitLenLo >>> 0) & 0xff\n      hashBlocks(this.temp, this.state, this.buffer, 0, padLength)\n      this.finished = true\n    }\n    for (var i = 0; i < 8; i++) {\n      out[i * 4 + 0] = (this.state[i] >>> 24) & 0xff\n      out[i * 4 + 1] = (this.state[i] >>> 16) & 0xff\n      out[i * 4 + 2] = (this.state[i] >>> 8) & 0xff\n      out[i * 4 + 3] = (this.state[i] >>> 0) & 0xff\n    }\n    return this\n  }\n  // Returns the final hash digest.\n  Hash.prototype.digest = function () {\n    const out = new Uint8Array(this.digestLength)\n    this.finish(out)\n    return out\n  }\n  // Internal function for use in HMAC for optimization.\n  Hash.prototype._saveState = function (out) {\n    for (let i = 0; i < this.state.length; i++) {\n      out[i] = this.state[i]\n    }\n  }\n  // Internal function for use in HMAC for optimization.\n  Hash.prototype._restoreState = function (from, bytesHashed) {\n    for (let i = 0; i < this.state.length; i++) {\n      this.state[i] = from[i]\n    }\n    this.bytesHashed = bytesHashed\n    this.finished = false\n    this.bufferLength = 0\n  }\n  return Hash\n}())\nexport { Hash }\n// HMAC implements HMAC-SHA256 message authentication algorithm.\nconst HMAC = /** @class */ (function () {\n  function HMAC (key) {\n    this.inner = new Hash()\n    this.outer = new Hash()\n    this.blockSize = this.inner.blockSize\n    this.digestLength = this.inner.digestLength\n    const pad = new Uint8Array(this.blockSize)\n    if (key.length > this.blockSize) {\n      (new Hash()).update(key).finish(pad).clean()\n    } else {\n      for (var i = 0; i < key.length; i++) {\n        pad[i] = key[i]\n      }\n    }\n    for (var i = 0; i < pad.length; i++) {\n      pad[i] ^= 0x36\n    }\n    this.inner.update(pad)\n    for (var i = 0; i < pad.length; i++) {\n      pad[i] ^= 0x36 ^ 0x5c\n    }\n    this.outer.update(pad)\n    this.istate = new Uint32Array(8)\n    this.ostate = new Uint32Array(8)\n    this.inner._saveState(this.istate)\n    this.outer._saveState(this.ostate)\n    for (var i = 0; i < pad.length; i++) {\n      pad[i] = 0\n    }\n  }\n  // Returns HMAC state to the state initialized with key\n  // to make it possible to run HMAC over the other data with the same\n  // key without creating a new instance.\n  HMAC.prototype.reset = function () {\n    this.inner._restoreState(this.istate, this.inner.blockSize)\n    this.outer._restoreState(this.ostate, this.outer.blockSize)\n    return this\n  }\n  // Cleans HMAC state.\n  HMAC.prototype.clean = function () {\n    for (let i = 0; i < this.istate.length; i++) {\n      this.ostate[i] = this.istate[i] = 0\n    }\n    this.inner.clean()\n    this.outer.clean()\n  }\n  // Updates state with provided data.\n  HMAC.prototype.update = function (data) {\n    this.inner.update(data)\n    return this\n  }\n  // Finalizes HMAC and puts the result in out.\n  HMAC.prototype.finish = function (out) {\n    if (this.outer.finished) {\n      this.outer.finish(out)\n    } else {\n      this.inner.finish(out)\n      this.outer.update(out, this.digestLength).finish(out)\n    }\n    return this\n  }\n  // Returns message authentication code.\n  HMAC.prototype.digest = function () {\n    const out = new Uint8Array(this.digestLength)\n    this.finish(out)\n    return out\n  }\n  return HMAC\n}())\nexport { HMAC }\n// Returns SHA256 hash of data.\nexport function hash (data) {\n  const h = (new Hash()).update(data)\n  const digest = h.digest()\n  h.clean()\n  return digest\n}\n// Function hash is both available as module.hash and as default export.\nexport default hash\n// Returns HMAC-SHA256 of data under the key.\nexport function hmac (key, data) {\n  const h = (new HMAC(key)).update(data)\n  const digest = h.digest()\n  h.clean()\n  return digest\n}\n// Fills hkdf buffer like this:\n// T(1) = HMAC-Hash(PRK, T(0) | info | 0x01)\nfunction fillBuffer (buffer, hmac, info, counter) {\n  // Counter is a byte value: check if it overflowed.\n  const num = counter[0]\n  if (num === 0) {\n    throw new Error('hkdf: cannot expand more')\n  }\n  // Prepare HMAC instance for new data with old key.\n  hmac.reset()\n  // Hash in previous output if it was generated\n  // (i.e. counter is greater than 1).\n  if (num > 1) {\n    hmac.update(buffer)\n  }\n  // Hash in info if it exists.\n  if (info) {\n    hmac.update(info)\n  }\n  // Hash in the counter.\n  hmac.update(counter)\n  // Output result to buffer and clean HMAC instance.\n  hmac.finish(buffer)\n  // Increment counter inside typed array, this works properly.\n  counter[0]++\n}\nconst hkdfSalt = new Uint8Array(digestLength) // Filled with zeroes.\nexport function hkdf (key, salt, info, length) {\n  if (salt === void 0) { salt = hkdfSalt }\n  if (length === void 0) { length = 32 }\n  const counter = new Uint8Array([1])\n  // HKDF-Extract uses salt as HMAC key, and key as data.\n  const okm = hmac(salt, key)\n  // Initialize HMAC for expanding with extracted key.\n  // Ensure no collisions with `hmac` function.\n  const hmac_ = new HMAC(okm)\n  // Allocate buffer.\n  const buffer = new Uint8Array(hmac_.digestLength)\n  let bufpos = buffer.length\n  const out = new Uint8Array(length)\n  for (let i = 0; i < length; i++) {\n    if (bufpos === buffer.length) {\n      fillBuffer(buffer, hmac_, info, counter)\n      bufpos = 0\n    }\n    out[i] = buffer[bufpos++]\n  }\n  hmac_.clean()\n  buffer.fill(0)\n  counter.fill(0)\n  return out\n}\n// Derives a key from password and salt using PBKDF2-HMAC-SHA256\n// with the given number of iterations.\n//\n// The number of bytes returned is equal to dkLen.\n//\n// (For better security, avoid dkLen greater than hash length - 32 bytes).\nexport function pbkdf2 (password, salt, iterations, dkLen) {\n  const prf = new HMAC(password)\n  const len = prf.digestLength\n  const ctr = new Uint8Array(4)\n  const t = new Uint8Array(len)\n  const u = new Uint8Array(len)\n  const dk = new Uint8Array(dkLen)\n  for (var i = 0; i * len < dkLen; i++) {\n    const c = i + 1\n    ctr[0] = (c >>> 24) & 0xff\n    ctr[1] = (c >>> 16) & 0xff\n    ctr[2] = (c >>> 8) & 0xff\n    ctr[3] = (c >>> 0) & 0xff\n    prf.reset()\n    prf.update(salt)\n    prf.update(ctr)\n    prf.finish(u)\n    for (var j = 0; j < len; j++) {\n      t[j] = u[j]\n    }\n    for (var j = 2; j <= iterations; j++) {\n      prf.reset()\n      prf.update(u).finish(u)\n      for (let k = 0; k < len; k++) {\n        t[k] ^= u[k]\n      }\n    }\n    for (var j = 0; j < len && i * len + j < dkLen; j++) {\n      dk[i * len + j] = t[j]\n    }\n  }\n  for (var i = 0; i < len; i++) {\n    t[i] = u[i] = 0\n  }\n  for (var i = 0; i < 4; i++) {\n    ctr[i] = 0\n  }\n  prf.clean()\n  return dk\n}\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","import { Buffer } from 'buffer/index.js'\nexport { Buffer }  //for iife reference MBP.Buffer\nconst encoder = new TextEncoder(); \nconst decoder = new TextDecoder();\n\n/* NB( type:String , number:Number) : Buffer\n@params: \n-type: It's string keyword that indicate datatype.\n  8, 16, 32 : use number for typedNumber bit size \n\n  default:  read and write as Unsigned BigEndian.\n  include i or I for Signed number.\n  include l or L for LittleEndian.\n\n  examples\n  32  : 32bits unsigend number (uint32)\n  i16 : 16bits signed number (int16)     \n  16L : 16bits unsigend number little endian. \n\n-value:  number to store\n\nreturn: Buffer\n*/\n \nexport const NB = numberBuffer;\nexport function numberBuffer(type, initValue = 0) {\n    let buffer;\n    if (type === undefined || typeof type !== 'string' || typeof initValue !== 'number') {\n        throw TypeError('invlaid init variablie type name. ')\n    }\n    type = type.toUpperCase()\n\n    if (type.includes('8')) {\n        buffer = Buffer.alloc(1)\n        if (type.includes('I')) buffer.writeInt8(initValue)\n        else buffer.writeUint8(initValue)\n\n    } else if (type.includes('16')) {\n        buffer = Buffer.alloc(2)\n        if (type.includes('I')) {\n            if (type.includes('L')) buffer.writeInt16LE(initValue)\n            else buffer.writeInt16BE(initValue)\n        } else {\n            if (type.includes('L')) buffer.writeUint16LE(initValue)\n            else buffer.writeUint16BE(initValue)\n        }\n\n    } else if (type.includes('32')) {\n        buffer = Buffer.alloc(4)\n        if (type.includes('I')) {\n            if (type.includes('L')) buffer.writeInt32LE(initValue)\n            else buffer.writeInt32BE(initValue)\n        } else {\n            if (type.includes('L')) buffer.writeUint32LE(initValue)\n            else buffer.writeUint32BE(initValue)\n        }\n    } else if (type.includes('N')) {  // number as string\n        buffer = Buffer.from(String(initValue))\n    } else {\n        console.log(`invalid type: ${type} or initvalue: ${initValue}`)\n    }\n    return buffer\n\n}\n\n\n\n/*\n@name: title name( always string)\n\n@typeOfData:  \n-type string for TypedNumber\n-string for textbuffer (without initValue)\n-number for buffer size with initValue\n\n@initValue:\n-number for buffer with initValue\n-empty for buffer and string data.\n\n@return  Meta Buffer:  ['name', 'type', <buffer>:Buffer] : Array \n\n// use case\n// typed number\nMB('numberTitle','16i',-30000) \n\n// string buffer\nMB('greeting', 'hello world' )\n\n\n// buffer , arraybuffer or TypedArray\nMB('bufferTitle', buffer )\n\n// new buffer with init value(0~255)  and byteSize.\n// MB( 'title', byteSize, initvalue )  \nMB( 'buf32', 32, 0xff )  \n\n*/\n\nexport const MB = metaBuffer\nexport function metaBuffer(name, typeOrData, initValue) {\n    let buffer;\n    let bufferType = 'B';\n    if (typeof typeOrData === 'number') {  // this number is buffer size. not value.\n        buffer = Buffer.alloc(typeOrData)\n        if (initValue) buffer.fill(initValue)\n        bufferType = 'B'\n    } else if (typeof typeOrData === 'string' && typeof initValue === 'number') { // number with type.\n        bufferType = typeOrData.toUpperCase()  //use explicit type name\n        buffer = numberBuffer(typeOrData, initValue) // notice.  two categories.  n: number string.  8, 16, 32: typed number.  \n    } else if (typeof typeOrData === 'string' && initValue === undefined) { //  string buffer\n        buffer = Buffer.from(typeOrData)\n        bufferType = 'S';\n    } else if (typeOrData instanceof Uint8Array && initValue === undefined) {  // buffer | Uint8Array \n        // Buffer.from:  Copies the passed buffer data onto a new Buffer instance.\n        // typecasting Uint8Array to Buffer.\n        buffer = ( typeOrData instanceof Buffer ) ? typeOrData : Buffer.from( typeOrData )\n    } else if (typeOrData instanceof ArrayBuffer && initValue === undefined) { // arrayBuffer\n        // Notice. \n        // 1. using typedarray is recomended. arraybuffer should check byteOffset & byteLength\n        // 2. Buffer will share the same allocated memory \n        buffer = Buffer.from(typeOrData)\n    } else if (ArrayBuffer.isView(typeOrData)) {    // typedarray buffer\n        buffer = Buffer.from(typeOrData.buffer, typeOrData.byteOffset, typeOrData.byteLength)\n    } else if (typeof typeOrData === 'object' && initValue === undefined) {  //   object. like array. stringify\n        buffer = Buffer.from(JSON.stringify(typeOrData))\n        bufferType = 'O'\n    } else if (typeof typeOrData === 'boolean' && initValue === undefined) {  //   object. like array. stringify\n        let v = typeOrData ? 1 : 0;\n        buffer = Buffer.from([v])\n        bufferType = '!'\n    } else {\n        prn('invalid metabuffer data err', name, typeOrData, initValue)\n    }\n\n    if (typeof name === 'string' && name.includes('#')) name = ''  // \n\n    return [name, bufferType, buffer]\n\n}\n\n\nexport const MBA = metaBufferArguments\nexport function metaBufferArguments(...args) {\n    let i = 0;\n    let mba = args.map(\n        data => {\n            let argsIndex = i++;  // index number become metabuffer's name.\n            if (typeof data === 'number') {\n                // * JS's primitive Number stored as string. \n                return MB(argsIndex, 'N', data)\n            } else {\n                // typedarray, dataview, array, object, boolean\n                return MB(argsIndex, data)\n            }\n        })\n\n    // add parameter length. \n    mba.push(MB('$', '8', mba.length))\n    return mba\n}\n\n\n\nexport function readTypedBuffer(type, buffer, offset, length) {\n    \n    // prn('RTB type',type)\n    if (type.includes('8')) {\n        if (type.includes('I')) {\n            return buffer.readInt8(offset)\n        } else {\n            return buffer.readUint8(offset)\n        }\n    } else if (type.includes('16')) {\n        if (type.includes('I')) {\n            if (type.includes('L')) {\n                return buffer.readInt16LE(offset)\n            } else {\n                return buffer.readInt16BE(offset)\n            }\n        } else {\n            if (type.includes('L')) {\n                return buffer.readUint16LE(offset)\n            } else {\n                return buffer.readUint16BE(offset)\n            }\n        }\n\n    } else if (type.includes('32')) {\n        if (type.includes('I')) {\n            if (type.includes('L')) {\n                return buffer.readInt32LE(offset)\n            } else {\n                return buffer.readInt32BE(offset)\n            }\n        } else {\n            if (type.includes('L')) {\n                return buffer.readUint32LE(offset)\n            } else {\n                return buffer.readUint32BE(offset)\n            }\n        }\n\n    } else if (type === 'B') { //buffer\n        return buffer.slice(offset, offset + length)\n    } else if (type === 'S') { //string or arguments\n        let strBuffer = buffer.slice(offset, offset + length)\n        return decoder.decode(strBuffer)\n    } else if (type === 'N') { // number encoded as string\n        let strNumber = buffer.slice(offset, offset + length)\n        return Number(decoder.decode(strNumber))\n    } else if (type === 'O') { // object encoded string\n        let objEncoded = buffer.slice(offset, offset + length)\n        try {\n            return JSON.parse(decoder.decode(objEncoded))\n        } catch (error) {\n            console.log('err. obj parse')\n        }\n    } else if (type === '!') { // boolean  1:true 0:false\n        let v = buffer.readInt8(offset)\n        return v === 1 ? true : false\n    } else {\n        throw TypeError('invalid data')\n\n    }\n}\n\nfunction flatSubArray(args) {\n    // prn('args',args)\n    let subArr = []\n    let mainArr = args.filter(item => {\n        if (Array.isArray(item[0])) subArr = subArr.concat(item)\n        else return item\n    })\n    return mainArr.concat(subArr)\n}\n\nexport function pack(...args) {\n    let bufArr = flatSubArray(args)\n    let size = 0;\n    let info = []\n    let offset = 0\n\n    bufArr.forEach(bufPack => {\n        let [name, type, data] = bufPack\n        size += data.byteLength\n        if (typeof name === 'number' || name.length > 0) {\n            if (type.includes('N') || type.includes('B') || type.includes('S') || type.includes('O')) {\n                info.push([name, type, offset, data.byteLength])\n            } else {\n                info.push([name, type, offset])\n            }\n        }\n        offset = size;\n    })\n\n    let infoEncoded = encoder.encode(JSON.stringify(info))\n    let infoSize = infoEncoded.byteLength\n    size = size + infoSize + 2\n\n    let buffer = Buffer.alloc(size)\n    offset = 0\n    bufArr.forEach(bufPack => {\n        let buf = bufPack[2]\n        buffer.set(buf, offset)\n        offset += buf.byteLength\n    })\n\n    buffer.set(infoEncoded, offset)\n    let infoSizeBuff = NB('16', infoSize)\n    buffer.set(infoSizeBuff, offset + infoSize)\n    return buffer\n}\n\nexport function unpack(binPack) {\n    let buffer = Buffer.from(binPack)\n    let infoSize = buffer.readUInt16BE(buffer.byteLength - 2)\n    let infoFrom = buffer.byteLength - infoSize - 2;\n    let infoEncoded = buffer.subarray(infoFrom, buffer.byteLength - 2)\n    try {\n        let decoded = decoder.decode(infoEncoded)\n        let infoArr = JSON.parse(decoded)\n        let binObj = {}\n        infoArr.forEach(bufPack => {\n            let [name, type, offset, length] = bufPack\n            binObj[name] = readTypedBuffer(type, buffer, offset, length)\n        })\n\n        // set args with values\n        if (binObj.$) {\n            let argLen = binObj.$;\n            let args = []\n            for (let n = 0; n < argLen; n++) {\n                args.push(binObj[n])\n            }\n            binObj.args = args\n            binObj.$ = binObj.args  // same  .args or .$\n        }\n        // prn('binObj',binObj)\n        return binObj\n    } catch (error) {\n        console.log('unpack: invalid data.', error)\n    }\n\n}\n\n\n\n\n\n/*\n@input: any\n@shareArrayBuffer option:    false(default):  return new( or copied) ArrayBuffer.    true: share the input data's arrayBuffer. \n@return uint8Array.  \n\n// use case\nU8('str')     // string\nU8( number )  // number is initvalue range 0~255.  return one byte. \nU8( buffer )  // buffer, typedArray or arrayBuffer \nU8( object )  // array ,object \n\n*/\nexport const U8 = parseUint8Array;\nexport function parseUint8Array(data , shareArrayBuffer = false) {  \n\n    if (data == undefined) throw 'Invalid data type: Undefined'\n    if (typeof data === 'string') { // string > encode > uint8array\n        return encoder.encode(data)\n    } else if (typeof data === 'number') {  // number > 1 byte uint8array(number)\n        return Uint8Array.from([data])\n    } else if (data instanceof ArrayBuffer) {  // arraybuffer > wrap uint8array(ab)\n        if(shareArrayBuffer){\n            return new Uint8Array(data)\n        } \n        else {\n            let originData = new Uint8Array(data) \n            let dataCopy = new Uint8Array( data.byteLength )\n            dataCopy.set( originData )\n            return dataCopy\n        }\n    } else if (ArrayBuffer.isView(data)) {   // accept Buffer too.\n        if( shareArrayBuffer){\n            return new Uint8Array(data.buffer, data.byteOffset, data.byteLength)  // DataView, TypedArray >  uint8array( use offset, length )\n        }else{\n            // new memory to protect origin arraybuffer.\n            let originData = new Uint8Array(data.buffer, data.byteOffset, data.byteLength) \n            let dataCopy = new Uint8Array( data.byteLength)\n            dataCopy.set( originData  ) \n            return dataCopy\n        }\n    } else { // array, object \n        return encoder.encode(JSON.stringify(data))  // object(array.. )  > JSON.str > encode > unint8array\n    }\n}\n\nexport const B8 = parseBuffer\nexport function parseBuffer( data, shareArrayBuffer = false ){\n    const u8 = parseUint8Array( data, shareArrayBuffer)\n    return Buffer.from( u8 )\n}\n\nexport const B8pack = parseBufferThenConcat;\nexport function parseBufferThenConcat( ...dataArray ){\n    try {\n        let bufferSize = 0\n        let offset = 0;\n        let buffers = dataArray.map(data => parseBuffer(data))\n        buffers.forEach(buf => { bufferSize += buf.byteLength })\n        let buffer = Buffer.alloc(bufferSize)\n        buffers.forEach(buf => { \n            buffer.set(buf, offset)\n            offset += buf.byteLength\n        })\n        return buffer\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n\n// 1. normalize: Uint8array list \n// 2. return new buffer merged.\nexport const U8pack = parseUint8ThenConcat;\nexport function parseUint8ThenConcat(...dataArray) {\n    try {\n        let bufferSize = 0\n        let offset = 0;\n        let buffers = dataArray.map(data => parseUint8Array(data))\n        buffers.forEach(buf => { bufferSize += buf.byteLength })\n        let buffer = new Uint8Array(bufferSize)\n        buffers.forEach(buf => {\n            buffer.set(buf, offset)\n            offset += buf.byteLength\n        })\n        return buffer\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n\nexport function hex(buffer) {\n    return Array.prototype.map.call(new Uint8Array(buffer), x => ('00' + x.toString(16)).slice(-2)).join('')\n} \n\n\nexport function equal(buf1, buf2) {\n    if (buf1.byteLength != buf2.byteLength) return false\n    for (let i = 0; i < buf1.byteLength; i++) {\n        if (buf1[i] != buf2[i]) return false\n    }\n\n    return true\n}\n\nfunction prn(...data) {\n    console.log(...data)\n}\n\n","import { hash as sha256, hmac } from '../lib/fast-sha256.js'\nimport { MBP } from 'meta-buffer-pack'\n\nsha256.hash = function (data) {\n  return sha256(MBP.U8(data))\n}\n\nsha256.hex = function (data) {\n  return MBP.hex(sha256.hash(data))\n}\n\nsha256.hmac = function (key, data) {\n  return hmac(MBP.U8(key), MBP.U8(data))\n}\n\n\nexport { sha256 }\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","import { sha256 } from './otpus-sha256.js'\nimport { MBP, Buffer } from 'meta-buffer-pack'\nimport base64js from 'base64-js'\nimport { webcrypto } from 'crypto'\n\nexport { sha256, base64js, MBP, Buffer }\nexport let webCrypto\n\nconst encoder = new TextEncoder()\nconst decoder = new TextDecoder()\n\nlet isNode = false\ntry {\n    isNode = Object.prototype.toString.call(global.process) === '[object process]'\n} catch (e) { }\n\nconst verbose = false;\ntry {\n    if (isNode) {\n        console.log('# node.js env:')\n        webCrypto = webcrypto;\n        if (verbose) webCryptoTest();\n    } else if (typeof importScripts === 'function') {\n        webCrypto = self.crypto\n        console.log('# Web Worker env')\n        if (verbose) webCryptoTest();\n    } else if (typeof document !== 'undefined') {\n        webCrypto = window.crypto\n        console.log('# browser env')\n        if (verbose) webCryptoTest();\n    }\n\n} catch (error) {\n    console.log('webCrypto err: ', error)\n}\n\nexport function webCryptoTest() {\n\n    if (typeof webCrypto.subtle !== 'object') {\n        console.log('No WebCrypto API supported.')\n    } else {\n        console.log('webCrypto test:')\n        let rand = webCrypto.getRandomValues(new Uint8Array(8))\n        console.log('1. getRandomValues: ', rand)\n\n        webCrypto.subtle.digest('SHA-256', rand).then(sum => {\n            let hash1 = MBP.hex(sum);\n            let hash2 = sha256.hex(rand);\n            console.log('A.Compare binary hash sums')\n            console.log('1. subtle.digest.sha256: ', hash1)\n            console.log('2. js.sha256: ', hash2)\n            if (hash1 === hash2) {\n                console.log('binary hash test: success.')\n            } else {\n                throw new Error('diffrent hash result')\n            }\n\n        })\n        let message = MBP.hex(rand)\n        webCrypto.subtle.digest('SHA-256', encoder.encode(message)).then(sum => {\n            let hash1 = MBP.hex(sum);\n            let hash2 = sha256.hex(message);\n            console.log('B.Compare string hash sums')\n            console.log('1. subtle.digest.sha256: ', hash1)\n            console.log('2. js.sha256: ', hash2)\n            if (hash1 === hash2) {\n                console.log('string hash test: success.')\n            } else {\n                throw new Error('diffrent hash result')\n            }\n\n        })\n\n    }\n}\n\n\n\nexport function getHashSpeed(n) {\n    const t1 = performance.now()\n    let buf = new Uint8Array(32)\n    for (let i = 0; i < n; i++) {\n        buf = sha256.hash(buf)\n    }\n    const ms = performance.now() - t1\n    return (n * 1000 / ms).toFixed(0)\n}\n\nexport function printHashPerformance(n) {\n    const nps = getHashSpeed(n)\n    let hashRate// = nps;\n    for (let aMultiples = ['K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'], nMultiple = 0, nApprox = nps / 1024; nApprox > 1; nApprox /= 1024, nMultiple++) {\n        hashRate = nApprox.toFixed(3) + ' ' + aMultiples[nMultiple] + 'H/s ( ' + nps + ' hash/sec )'\n    }\n    return 'sha256 hash power: ' + hashRate\n}\n\n\n//  test. \nlet rand = webCrypto.getRandomValues(new Uint8Array(8))\nwebCrypto.subtle.digest('SHA-256', rand).then(sum => {\n    let hash1 = MBP.hex(sum);\n    let hash2 = sha256.hex(rand);\n    if (hash1 === hash2) {\n        console.log('hash test: success. speed:' + printHashPerformance(10000))\n    } else {\n        throw new Error('diffrent hash result')\n    }\n\n})","// import { sha256 } from './otpus-sha256.js'\n// import { MBP, Buffer } from 'meta-buffer-pack'\n// import base64js from 'base64-js'\n// import { webcrypto } from 'crypto'\n\nimport { sha256, base64js, MBP, Buffer, webCrypto, webCryptoTest, printHashPerformance, getHashSpeed } from './otpus-util.js'\nexport { sha256, base64js, MBP, Buffer, webCrypto, webCryptoTest, printHashPerformance }\n\nconst encoder = new TextEncoder()\nconst decoder = new TextDecoder()\n\n// export let webCrypto;\n\n// let isNode = false\n// try {\n//     isNode = Object.prototype.toString.call(global.process) === '[object process]'\n// } catch (e) { }\n\n// try {\n//     if (isNode) {\n//         console.log('# node.js env:')  \n//         webCrypto = webcrypto;\n//         webCryptoTest();\n//     } else if (typeof importScripts === 'function') {\n//         webCrypto = self.crypto\n//         console.log('# Web Worker env')\n//         webCryptoTest();\n//     } else if (typeof document !== 'undefined') {\n//         webCrypto = window.crypto\n//         console.log('# browser env')\n//         webCryptoTest();\n//     }\n\n// } catch (error) {\n//     console.log('webCrypto err: ', error)\n// }\n\n\n\nexport function xotp(data, otpKey32Bytes, otpStartIndex = 0, shareDataBuffer = false) {\n\n    if (!(otpKey32Bytes instanceof Uint8Array && otpKey32Bytes.byteLength === 32)) {\n        console.log('wrong type of otpKey32Bytes:', otpKey32Bytes)\n        throw new TypeError('xotp: Use 32 byteLength Uint8Array key.')\n    }\n\n    if (!(data instanceof Uint8Array)) {\n        throw new TypeError('xotp:  Use Uint8Array data. ')\n    }\n\n    // otpKey is 36bytes  \n    // 32Bytes otpKey32Bytes + 4byte Uint32 Counter( LittleEndian ). (like Uint32Array(value ) )\n    const otpKey = MBP.U8pack(otpKey32Bytes, MBP.NB('32L', otpStartIndex))\n    // console.log('otpKey', MBP.hex(otpKey))\n\n    // data\n    data = MBP.U8(data, shareDataBuffer)\n    const otpMasterKeyArr = new Uint32Array(otpKey.buffer)\n\n    const nBytes = data.byteLength\n    const nTimes = Math.ceil(nBytes / 32) // 최소값 1   ; 필요한 otp 개수\n    const lastTime = nTimes - 1 // 최소값 0\n    const nRemains = nBytes % 32\n    const buf32Len = Math.floor(nBytes / 4) // byteLength / 4 => 4바이트의 배수\n    // console.log(`bayoXCrypto src u8Arr .byteOffset: ${u8Arr.byteOffset} .byteLength: ${u8Arr.byteLength}  1/4 floored => buf32Len: ${buf32Len}`);\n\n    const buf32 = new Uint32Array(data.buffer, data.byteOffset, buf32Len)\n\n    for (let i = 0; i < nTimes; i++) {\n        // 32바이트 단위로 원본 파일읽어서 otp 연산.\n        // 1. indexed otp 생성\n        otpMasterKeyArr[8]++\n\n        const potp = sha256.hash(otpMasterKeyArr.buffer)\n        const potp32 = new Uint32Array(potp.buffer)\n\n        // console.log('potp', potp)\n        // console.log('potp32', potp32)\n        if (i === lastTime && nRemains !== 0) { // 32바이트 이하 (나머지 Byte 연산)\n            const potp8 = potp\n            for (let q = nBytes - nRemains, r = 0; r < nRemains; r++) { // 최대 31번\n                // console.log(`q:${q} r:${r}`);\n                data[q++] ^= potp8[r] // q;버퍼의 index   r; otp의 index\n            }\n        } else { // 4Bytes 단위 8회 연산\n            for (let ib = 0; ib < 8; ib++) buf32[i * 8 + ib] ^= potp32[ib]\n        }\n    }\n\n    return data\n}\n\n/*\n    문자열을 UTF8호환 TextEncoder로 encode 하여 버퍼로 변환후 암호화한뒤 base64 문자열로 반환한다.\n    특징 및 제한\n    1. randomize size.  : 매 암호화시마다 암호결과값의 크기가 달라진다.(현재 0~64 랜덤추가됨)   메시지폭 검사 대항.\n    2. control strength of key:  중첩해쉬를 통한 암호키 생성방식으로 강도 조절.\n                                2 ^ n 번 중첩연산됨. n은 10~16 충분. 너무크면 시간이 오래걸리므로 주의.\n                                현재, 16까지만 되도록 제한걸어둠.\n\n    3. 메시지 크기는 2 ^ 16 까지만 되도록 제한함. 문자열이라 64KB정도로 제한함.\n\n    암호화 결과 데이타 버퍼 구조.\n    +---------+-------+----------+\n    데이타명:   index   bytesize.\n    msg:        [0]     1 ~ 64KB\n    hmac:       [-67]   32 Bytes\n    salt:       [-35]   32 Bytes\n    nPower:     [-3]    1 Bytes\n    msgLen:     [-2]    2 Bytes\n*/\n\nconst msgPos = { msg: 0, hmac: -67, salt: -35, nPower: -3, msgLen: -2 }\n\n// key , msg  : string\n// output  base64 : string\n// save, transport  string\n\nexport function encryptMsg(msg, key, nPower = 10) {\n    const msgBuffer = encoder.encode(msg)\n    const realMsgLen = msgBuffer.byteLength\n    const saltBin = webCrypto.getRandomValues(new Uint8Array(32))\n    // var saltBin = new Uint8Array(32) ;\n    const randomSize = realMsgLen + parseInt(webCrypto.getRandomValues(new Uint8Array(1))[0] / 4) // 0~63.\n    // var randomSize = 4;\n    if (randomSize > 65536) {\n        console.log('over msg size limit: it support about 64KB ascii characters.  or about 20K  UTF-8 characters ')\n        return ''\n    }\n    if (nPower > 20) {\n        console.log('over ntimeKey limit: 16 max.')\n        return ''\n    }\n    // 다른형식의 데이타나 손상된 메시지 체크도 필요함.  이값이 너무 커지면 멈춤.\n    // 현재는 특정사이트용 간단한 구현.  공개lib형의 경우 추가로 메시지 체크섬,  메시지 시간, 규칙, 에러핸들링 추가요함.\n\n    const msgBufferExpanded = new Uint8Array(randomSize)\n    msgBufferExpanded.set(msgBuffer)\n    const saltStr = buf2hex(saltBin.buffer)\n    const masterKeyArr = nTimesHash(saltStr + key, Math.pow(2, nPower))\n\n    const hmac = sha256.hmac(masterKeyArr, msgBuffer)\n\n    xotp(msgBufferExpanded, masterKeyArr, 0)\n    const base64Buffer = new Uint8Array(msgBufferExpanded.byteLength + hmac.byteLength + saltBin.byteLength + 3)\n    base64Buffer.set(msgBufferExpanded)\n\n    base64Buffer.set(hmac, base64Buffer.byteLength + msgPos.hmac)\n    base64Buffer.set(saltBin, base64Buffer.byteLength + msgPos.salt)\n    base64Buffer[base64Buffer.byteLength + msgPos.nPower] = nPower\n    const dv = new DataView(base64Buffer.buffer)\n    dv.setUint16(base64Buffer.byteLength + msgPos.msgLen, msgBufferExpanded.byteLength)\n    return base64js.fromByteArray(base64Buffer)\n}\n\nexport function encryptMsgPack(msg, key, nPower = 10) {\n\n    const msgBuffer = MBP.U8(msg)\n    const realMsgLen = msgBuffer.byteLength\n    const saltBin = webCrypto.getRandomValues(new Uint8Array(32))\n\n    const randomSize = realMsgLen + parseInt(webCrypto.getRandomValues(new Uint8Array(1))[0] / 4) // 0~63.\n    // var randomSize = 4;\n\n\n    const msgBufferExpanded = new Uint8Array(randomSize)\n    msgBufferExpanded.set(msgBuffer)\n    const saltStr = buf2hex(saltBin)\n\n    const masterKeyArr = nTimesHash(saltStr + key, Math.pow(2, nPower))\n\n    const hmac = sha256.hmac(masterKeyArr, msgBuffer)\n\n    // hexlog('mkey', masterKeyArr)\n    // hexlog('mbe', msgBufferExpanded)\n\n    let encBuffer = xotp(msgBufferExpanded, masterKeyArr, 0)\n    // hexlog('mbe', encBuffer)\n\n    const pack = MBP.pack(\n        MBP.MB('msgBuffer', encBuffer),\n        MBP.MB('hmac', hmac),\n        MBP.MB('salt', saltBin),\n        MBP.MB('nPower', '8', nPower),\n        MBP.MB('msgLen', '16', msgBuffer.byteLength)\n    )\n    // console.log( pack )\n    return pack.toString('base64')\n}\n\nexport function decryptMsgPack(b64msg, key) {\n    const msgObj = MBP.unpack(Buffer.from(b64msg, 'base64'))\n\n    // console.log( 'msgObj', msgObj)\n\n    if (msgObj.nPower > 20) {\n        console.log('warning: too much nPower:' + msgObj.nPower)\n        return 'nPower too large'\n    }\n    const saltStr = buf2hex(msgObj.salt)\n    const masterKeyArr = nTimesHash(saltStr + key, Math.pow(2, msgObj.nPower))\n\n    const decodedMsgBuffer = xotp(msgObj.msgBuffer, masterKeyArr, 0)\n\n    const realMsgBuffer = decodedMsgBuffer.slice(0, msgObj.msgLen)\n\n    const hmac = sha256.hmac(masterKeyArr, realMsgBuffer)\n\n    if (!equal(hmac, msgObj.hmac)) return 'BROKEN'\n    const msg = decoder.decode(realMsgBuffer)\n\n    return msg\n}\n\nexport function decryptMsg(b64msg, key) {\n    const totalBuffer = base64js.toByteArray(b64msg)\n    const dv = new DataView(totalBuffer.buffer)\n    const msgLen = dv.getUint16(totalBuffer.byteLength + msgPos.msgLen)\n    const expandedMsgBuffer = totalBuffer.slice(0, msgLen)\n    const saltBin = totalBuffer.slice(msgPos.salt, msgPos.nPower)\n    const hmacRead = totalBuffer.slice(msgPos.hmac, msgPos.salt)\n\n    const nPower = dv.getUint8(totalBuffer.byteLength + msgPos.nPower)\n    if (nPower > 20) {\n        console.log('warning: too much nPower:' + nPower)\n        return 'nPower 값이 너무큰것같음'\n    }\n    const saltStr = buf2hex(saltBin.buffer)\n    const masterKeyArr = nTimesHash(saltStr + key, Math.pow(2, nPower))\n    xotp(expandedMsgBuffer, masterKeyArr, 0)\n    const realMsgBuffer = expandedMsgBuffer.slice(0, expandedMsgBuffer.indexOf(0))\n\n    const hmac = sha256.hmac(masterKeyArr, realMsgBuffer)\n\n    if (!equal(hmac, hmacRead)) return 'BROKEN'\n    const msg = decoder.decode(realMsgBuffer)\n\n    return msg\n}\n\nexport function buf2hex(buffer) { return Array.prototype.map.call(new Uint8Array(buffer), x => ('00' + x.toString(16)).slice(-2)).join('') } // arraybuffer를 hex문자열로\n\nexport function equal(buf1, buf2) {\n    if (buf1.byteLength !== buf2.byteLength) return false\n    for (let i = 0; i < buf1.byteLength; i++) {\n        if (buf1[i] !== buf2[i]) return false\n    }\n    return true\n}\n\n/* nTimesHash.   (PBKDF2 와 유사한 용도)\n최초  srcData로 arrayBuffer화 1회 연ㅏ 후  n회 반복.  총 hash 연산수는 n+1번임.\n입력: srcData:  참고로 문자열, UTF-8문자열 입력시 인코딩됨, array, typedarray, arraybuffer 모두 지원\n출력: Uint8Array 반환\n*/\n\nexport function nTimesHash(srcData, n) {\n    let hashSum = sha256.hash(srcData)\n    for (let i = 0; i < n; i++) hashSum = sha256.hash(hashSum)\n    return hashSum\n}\n\n\nexport const HASH_POWER = getHashSpeed(10000)\n\n\nfunction hexlog(name, data) {\n\n    console.log(name, MBP.hex(data))\n}"],"names":["K","Uint32Array","hashBlocks","w","v","p","pos","len","a","b","c","d","e","f","g","h","u","i","j","t1","t2","Hash","this","digestLength","blockSize","state","Int32Array","temp","buffer","Uint8Array","bufferLength","bytesHashed","finished","reset","prototype","clean","length","update","data","dataLength","Error","dataPos","finish","out","left","bitLenHi","bitLenLo","padLength","digest","_saveState","_restoreState","from","HMAC","key","inner","outer","pad","istate","ostate","hash","byteLength_1","b64","lens","getLens","validLen","placeHoldersLen","toByteArray_1","tmp","arr","Arr","_byteLength","curByte","revLookup","charCodeAt","fromByteArray_1","uint8","extraBytes","parts","maxChunkLength","len2","push","encodeChunk","lookup","join","Array","code","indexOf","start","end","num","output","revLookup$1","offset","isLE","mLen","nBytes","m","eLen","eMax","eBias","nBits","s","NaN","Infinity","Math","pow","value","rt","abs","isNaN","floor","log","LN2","customInspectSymbol","Symbol","exports","Buffer","SlowBuffer","alloc","INSPECT_MAX_BYTES","K_MAX_LENGTH","createBuffer","RangeError","buf","Object","setPrototypeOf","arg","encodingOrOffset","TypeError","allocUnsafe","string","encoding","isEncoding","byteLength","actual","write","slice","fromString","ArrayBuffer","isView","arrayView","isInstance","copy","fromArrayBuffer","byteOffset","fromArrayLike","fromArrayView","SharedArrayBuffer","valueOf","obj","isBuffer","checked","undefined","numberIsNaN","type","isArray","fromObject","toPrimitive","assertSize","size","array","toString","mustMatch","arguments","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","n","bidirectionalIndexOf","val","dir","arrayIndexOf","call","lastIndexOf","indexSize","arrLength","valLength","String","read","readUInt16BE","foundIndex","found","hexWrite","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","asciiToBytes","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","base64","fromByteArray","min","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","kMaxLength","TYPED_ARRAY_SUPPORT","proto","foo","typedArraySupport","console","error","defineProperty","enumerable","get","poolSize","fill","allocUnsafeSlow","_isBuffer","compare","x","y","concat","list","set","swap16","swap32","swap64","toLocaleString","equals","inspect","max","replace","trim","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","ret","hexSliceLookupTable","bytes","checkOffset","ext","checkInt","wrtBigUInt64LE","checkIntBI","BigInt","wrtBigUInt64BE","checkIEEE754","writeFloat","littleEndian","noAssert","ieee754","writeDouble","newBuf","subarray","readUintLE","readUIntLE","mul","readUintBE","readUIntBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readUInt32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","first","last","boundsError","readBigUInt64BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readBigInt64LE","readBigInt64BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUintLE","writeUIntLE","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","errors","E","sym","getMessage","Base","constructor","super","writable","configurable","name","stack","message","addNumericalSeparator","range","ERR_OUT_OF_RANGE","checkBounds","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","input","msg","received","isInteger","INVALID_BASE64_RE","leadSurrogate","toByteArray","split","base64clean","src","dst","alphabet","table","i16","fn","BufferBigIntNotDefined","encoder","TextEncoder","decoder","TextDecoder","NB","numberBuffer","initValue","toUpperCase","MB","metaBuffer","typeOrData","bufferType","JSON","stringify","prn","MBA","metaBufferArguments","args","mba","map","argsIndex","readTypedBuffer","strBuffer","decode","strNumber","objEncoded","parse","pack","bufArr","subArr","filter","item","flatSubArray","info","forEach","bufPack","infoEncoded","encode","infoSize","infoSizeBuff","unpack","binPack","infoFrom","decoded","infoArr","binObj","$","argLen","U8","parseUint8Array","shareArrayBuffer","originData","dataCopy","B8","parseBuffer","u8","B8pack","parseBufferThenConcat","dataArray","bufferSize","buffers","U8pack","parseUint8ThenConcat","hex","buf1","buf2","sha256","MBP.U8","MBP.hex","hmac","webCrypto","isNode","global","process","webcrypto","importScripts","self","crypto","document","window","getHashSpeed","performance","now","toFixed","printHashPerformance","nps","hashRate","aMultiples","nMultiple","nApprox","rand","getRandomValues","subtle","then","sum","xotp","otpKey32Bytes","otpStartIndex","shareDataBuffer","otpKey","MBP.U8pack","MBP.NB","otpMasterKeyArr","nTimes","ceil","lastTime","nRemains","buf32Len","buf32","potp","potp32","potp8","q","r","ib","msgPos","buf2hex","equal","nTimesHash","srcData","hashSum","HASH_POWER","b64msg","totalBuffer","base64js","dv","DataView","msgLen","getUint16","expandedMsgBuffer","saltBin","hmacRead","nPower","getUint8","masterKeyArr","realMsgBuffer","msgObj","MBP.unpack","salt","msgBuffer","realMsgLen","randomSize","msgBufferExpanded","base64Buffer","setUint16","encBuffer","MBP.pack","MBP.MB","hash1","hash2"],"mappings":"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"}