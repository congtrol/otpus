{"version":3,"file":"otpus.esm.js","sources":["../lib/fast-sha256.js","../src/bayo-sha256.js","../node_modules/base64-js/index.js","../node_modules/ieee754/index.js","../node_modules/buffer/index.js","../node_modules/meta-buffer-pack/index.js","../src/otpus.js"],"sourcesContent":["// SHA-256 (+ HMAC and PBKDF2) for JavaScript.\n//\n// Written in 2014-2016 by Dmitry Chestnykh.\n// Public domain, no warranty.\n//\n// Functions (accept and return Uint8Arrays):\n//\n//   sha256(message) -> hash\n//   sha256.hmac(key, message) -> mac\n//   sha256.pbkdf2(password, salt, rounds, dkLen) -> dk\n//\n//  Classes:\n//\n//   new sha256.Hash()\n//   new sha256.HMAC(key)\n//\nexport var digestLength = 32\nexport var blockSize = 64\n// SHA-256 constants\nconst K = new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,\n  0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,\n  0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,\n  0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,\n  0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,\n  0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,\n  0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,\n  0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,\n  0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,\n  0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n])\nfunction hashBlocks (w, v, p, pos, len) {\n  let a, b, c, d, e, f, g, h, u, i, j, t1, t2\n  while (len >= 64) {\n    a = v[0]\n    b = v[1]\n    c = v[2]\n    d = v[3]\n    e = v[4]\n    f = v[5]\n    g = v[6]\n    h = v[7]\n    for (i = 0; i < 16; i++) {\n      j = pos + i * 4\n      w[i] = (((p[j] & 0xff) << 24) | ((p[j + 1] & 0xff) << 16) |\n                ((p[j + 2] & 0xff) << 8) | (p[j + 3] & 0xff))\n    }\n    for (i = 16; i < 64; i++) {\n      u = w[i - 2]\n      t1 = (u >>> 17 | u << (32 - 17)) ^ (u >>> 19 | u << (32 - 19)) ^ (u >>> 10)\n      u = w[i - 15]\n      t2 = (u >>> 7 | u << (32 - 7)) ^ (u >>> 18 | u << (32 - 18)) ^ (u >>> 3)\n      w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0)\n    }\n    for (i = 0; i < 64; i++) {\n      t1 = (((((e >>> 6 | e << (32 - 6)) ^ (e >>> 11 | e << (32 - 11)) ^\n                (e >>> 25 | e << (32 - 25))) + ((e & f) ^ (~e & g))) | 0) +\n                ((h + ((K[i] + w[i]) | 0)) | 0)) | 0\n      t2 = (((a >>> 2 | a << (32 - 2)) ^ (a >>> 13 | a << (32 - 13)) ^\n                (a >>> 22 | a << (32 - 22))) + ((a & b) ^ (a & c) ^ (b & c))) | 0\n      h = g\n      g = f\n      f = e\n      e = (d + t1) | 0\n      d = c\n      c = b\n      b = a\n      a = (t1 + t2) | 0\n    }\n    v[0] += a\n    v[1] += b\n    v[2] += c\n    v[3] += d\n    v[4] += e\n    v[5] += f\n    v[6] += g\n    v[7] += h\n    pos += 64\n    len -= 64\n  }\n  return pos\n}\n// Hash implements SHA256 hash algorithm.\nconst Hash = /** @class */ (function () {\n  function Hash () {\n    this.digestLength = digestLength\n    this.blockSize = blockSize\n    // Note: Int32Array is used instead of Uint32Array for performance reasons.\n    this.state = new Int32Array(8) // hash state\n    this.temp = new Int32Array(64) // temporary state\n    this.buffer = new Uint8Array(128) // buffer for data to hash\n    this.bufferLength = 0 // number of bytes in buffer\n    this.bytesHashed = 0 // number of total bytes hashed\n    this.finished = false // indicates whether the hash was finalized\n    this.reset()\n  }\n  // Resets hash state making it possible\n  // to re-use this instance to hash other data.\n  Hash.prototype.reset = function () {\n    this.state[0] = 0x6a09e667\n    this.state[1] = 0xbb67ae85\n    this.state[2] = 0x3c6ef372\n    this.state[3] = 0xa54ff53a\n    this.state[4] = 0x510e527f\n    this.state[5] = 0x9b05688c\n    this.state[6] = 0x1f83d9ab\n    this.state[7] = 0x5be0cd19\n    this.bufferLength = 0\n    this.bytesHashed = 0\n    this.finished = false\n    return this\n  }\n  // Cleans internal buffers and re-initializes hash state.\n  Hash.prototype.clean = function () {\n    for (var i = 0; i < this.buffer.length; i++) {\n      this.buffer[i] = 0\n    }\n    for (var i = 0; i < this.temp.length; i++) {\n      this.temp[i] = 0\n    }\n    this.reset()\n  }\n  // Updates hash state with the given data.\n  //\n  // Optionally, length of the data can be specified to hash\n  // fewer bytes than data.length.\n  //\n  // Throws error when trying to update already finalized hash:\n  // instance must be reset to use it again.\n  Hash.prototype.update = function (data, dataLength) {\n    if (dataLength === void 0) { dataLength = data.length }\n    if (this.finished) {\n      throw new Error(\"SHA256: can't update because hash was finished.\")\n    }\n    let dataPos = 0\n    this.bytesHashed += dataLength\n    if (this.bufferLength > 0) {\n      while (this.bufferLength < 64 && dataLength > 0) {\n        this.buffer[this.bufferLength++] = data[dataPos++]\n        dataLength--\n      }\n      if (this.bufferLength === 64) {\n        hashBlocks(this.temp, this.state, this.buffer, 0, 64)\n        this.bufferLength = 0\n      }\n    }\n    if (dataLength >= 64) {\n      dataPos = hashBlocks(this.temp, this.state, data, dataPos, dataLength)\n      dataLength %= 64\n    }\n    while (dataLength > 0) {\n      this.buffer[this.bufferLength++] = data[dataPos++]\n      dataLength--\n    }\n    return this\n  }\n  // Finalizes hash state and puts hash into out.\n  //\n  // If hash was already finalized, puts the same value.\n  Hash.prototype.finish = function (out) {\n    if (!this.finished) {\n      const bytesHashed = this.bytesHashed\n      const left = this.bufferLength\n      const bitLenHi = (bytesHashed / 0x20000000) | 0\n      const bitLenLo = bytesHashed << 3\n      const padLength = (bytesHashed % 64 < 56) ? 64 : 128\n      this.buffer[left] = 0x80\n      for (var i = left + 1; i < padLength - 8; i++) {\n        this.buffer[i] = 0\n      }\n      this.buffer[padLength - 8] = (bitLenHi >>> 24) & 0xff\n      this.buffer[padLength - 7] = (bitLenHi >>> 16) & 0xff\n      this.buffer[padLength - 6] = (bitLenHi >>> 8) & 0xff\n      this.buffer[padLength - 5] = (bitLenHi >>> 0) & 0xff\n      this.buffer[padLength - 4] = (bitLenLo >>> 24) & 0xff\n      this.buffer[padLength - 3] = (bitLenLo >>> 16) & 0xff\n      this.buffer[padLength - 2] = (bitLenLo >>> 8) & 0xff\n      this.buffer[padLength - 1] = (bitLenLo >>> 0) & 0xff\n      hashBlocks(this.temp, this.state, this.buffer, 0, padLength)\n      this.finished = true\n    }\n    for (var i = 0; i < 8; i++) {\n      out[i * 4 + 0] = (this.state[i] >>> 24) & 0xff\n      out[i * 4 + 1] = (this.state[i] >>> 16) & 0xff\n      out[i * 4 + 2] = (this.state[i] >>> 8) & 0xff\n      out[i * 4 + 3] = (this.state[i] >>> 0) & 0xff\n    }\n    return this\n  }\n  // Returns the final hash digest.\n  Hash.prototype.digest = function () {\n    const out = new Uint8Array(this.digestLength)\n    this.finish(out)\n    return out\n  }\n  // Internal function for use in HMAC for optimization.\n  Hash.prototype._saveState = function (out) {\n    for (let i = 0; i < this.state.length; i++) {\n      out[i] = this.state[i]\n    }\n  }\n  // Internal function for use in HMAC for optimization.\n  Hash.prototype._restoreState = function (from, bytesHashed) {\n    for (let i = 0; i < this.state.length; i++) {\n      this.state[i] = from[i]\n    }\n    this.bytesHashed = bytesHashed\n    this.finished = false\n    this.bufferLength = 0\n  }\n  return Hash\n}())\nexport { Hash }\n// HMAC implements HMAC-SHA256 message authentication algorithm.\nconst HMAC = /** @class */ (function () {\n  function HMAC (key) {\n    this.inner = new Hash()\n    this.outer = new Hash()\n    this.blockSize = this.inner.blockSize\n    this.digestLength = this.inner.digestLength\n    const pad = new Uint8Array(this.blockSize)\n    if (key.length > this.blockSize) {\n      (new Hash()).update(key).finish(pad).clean()\n    } else {\n      for (var i = 0; i < key.length; i++) {\n        pad[i] = key[i]\n      }\n    }\n    for (var i = 0; i < pad.length; i++) {\n      pad[i] ^= 0x36\n    }\n    this.inner.update(pad)\n    for (var i = 0; i < pad.length; i++) {\n      pad[i] ^= 0x36 ^ 0x5c\n    }\n    this.outer.update(pad)\n    this.istate = new Uint32Array(8)\n    this.ostate = new Uint32Array(8)\n    this.inner._saveState(this.istate)\n    this.outer._saveState(this.ostate)\n    for (var i = 0; i < pad.length; i++) {\n      pad[i] = 0\n    }\n  }\n  // Returns HMAC state to the state initialized with key\n  // to make it possible to run HMAC over the other data with the same\n  // key without creating a new instance.\n  HMAC.prototype.reset = function () {\n    this.inner._restoreState(this.istate, this.inner.blockSize)\n    this.outer._restoreState(this.ostate, this.outer.blockSize)\n    return this\n  }\n  // Cleans HMAC state.\n  HMAC.prototype.clean = function () {\n    for (let i = 0; i < this.istate.length; i++) {\n      this.ostate[i] = this.istate[i] = 0\n    }\n    this.inner.clean()\n    this.outer.clean()\n  }\n  // Updates state with provided data.\n  HMAC.prototype.update = function (data) {\n    this.inner.update(data)\n    return this\n  }\n  // Finalizes HMAC and puts the result in out.\n  HMAC.prototype.finish = function (out) {\n    if (this.outer.finished) {\n      this.outer.finish(out)\n    } else {\n      this.inner.finish(out)\n      this.outer.update(out, this.digestLength).finish(out)\n    }\n    return this\n  }\n  // Returns message authentication code.\n  HMAC.prototype.digest = function () {\n    const out = new Uint8Array(this.digestLength)\n    this.finish(out)\n    return out\n  }\n  return HMAC\n}())\nexport { HMAC }\n// Returns SHA256 hash of data.\nexport function hash (data) {\n  const h = (new Hash()).update(data)\n  const digest = h.digest()\n  h.clean()\n  return digest\n}\n// Function hash is both available as module.hash and as default export.\nexport default hash\n// Returns HMAC-SHA256 of data under the key.\nexport function hmac (key, data) {\n  const h = (new HMAC(key)).update(data)\n  const digest = h.digest()\n  h.clean()\n  return digest\n}\n// Fills hkdf buffer like this:\n// T(1) = HMAC-Hash(PRK, T(0) | info | 0x01)\nfunction fillBuffer (buffer, hmac, info, counter) {\n  // Counter is a byte value: check if it overflowed.\n  const num = counter[0]\n  if (num === 0) {\n    throw new Error('hkdf: cannot expand more')\n  }\n  // Prepare HMAC instance for new data with old key.\n  hmac.reset()\n  // Hash in previous output if it was generated\n  // (i.e. counter is greater than 1).\n  if (num > 1) {\n    hmac.update(buffer)\n  }\n  // Hash in info if it exists.\n  if (info) {\n    hmac.update(info)\n  }\n  // Hash in the counter.\n  hmac.update(counter)\n  // Output result to buffer and clean HMAC instance.\n  hmac.finish(buffer)\n  // Increment counter inside typed array, this works properly.\n  counter[0]++\n}\nconst hkdfSalt = new Uint8Array(digestLength) // Filled with zeroes.\nexport function hkdf (key, salt, info, length) {\n  if (salt === void 0) { salt = hkdfSalt }\n  if (length === void 0) { length = 32 }\n  const counter = new Uint8Array([1])\n  // HKDF-Extract uses salt as HMAC key, and key as data.\n  const okm = hmac(salt, key)\n  // Initialize HMAC for expanding with extracted key.\n  // Ensure no collisions with `hmac` function.\n  const hmac_ = new HMAC(okm)\n  // Allocate buffer.\n  const buffer = new Uint8Array(hmac_.digestLength)\n  let bufpos = buffer.length\n  const out = new Uint8Array(length)\n  for (let i = 0; i < length; i++) {\n    if (bufpos === buffer.length) {\n      fillBuffer(buffer, hmac_, info, counter)\n      bufpos = 0\n    }\n    out[i] = buffer[bufpos++]\n  }\n  hmac_.clean()\n  buffer.fill(0)\n  counter.fill(0)\n  return out\n}\n// Derives a key from password and salt using PBKDF2-HMAC-SHA256\n// with the given number of iterations.\n//\n// The number of bytes returned is equal to dkLen.\n//\n// (For better security, avoid dkLen greater than hash length - 32 bytes).\nexport function pbkdf2 (password, salt, iterations, dkLen) {\n  const prf = new HMAC(password)\n  const len = prf.digestLength\n  const ctr = new Uint8Array(4)\n  const t = new Uint8Array(len)\n  const u = new Uint8Array(len)\n  const dk = new Uint8Array(dkLen)\n  for (var i = 0; i * len < dkLen; i++) {\n    const c = i + 1\n    ctr[0] = (c >>> 24) & 0xff\n    ctr[1] = (c >>> 16) & 0xff\n    ctr[2] = (c >>> 8) & 0xff\n    ctr[3] = (c >>> 0) & 0xff\n    prf.reset()\n    prf.update(salt)\n    prf.update(ctr)\n    prf.finish(u)\n    for (var j = 0; j < len; j++) {\n      t[j] = u[j]\n    }\n    for (var j = 2; j <= iterations; j++) {\n      prf.reset()\n      prf.update(u).finish(u)\n      for (let k = 0; k < len; k++) {\n        t[k] ^= u[k]\n      }\n    }\n    for (var j = 0; j < len && i * len + j < dkLen; j++) {\n      dk[i * len + j] = t[j]\n    }\n  }\n  for (var i = 0; i < len; i++) {\n    t[i] = u[i] = 0\n  }\n  for (var i = 0; i < 4; i++) {\n    ctr[i] = 0\n  }\n  prf.clean()\n  return dk\n}\n","import {hash as sha256 , hmac } from '../lib/fast-sha256.js'\n// export * from '../lib/fast-sha256.js'\n\n// console.log('bayo-sha256', sha256)\nconst encoder = new TextEncoder()\nconst decoder = new TextDecoder()\n\nsha256.arrayBuffer = function (data) {\n  let type = 'unknown'\n  if (typeof data === 'string') {\n    type = 'string'\n    data = encoder.encode(data)\n  } else if (ArrayBuffer.isView(data)) {\n    if (data.constructor.name === 'Uint8Array') {\n      type = 'typedarray'\n    } else {\n      throw new Error('Use Uint8Array')\n    }\n  } else if (data.constructor === ArrayBuffer) {\n    type = 'arraybuffer'\n    data = new Uint8Array(data)\n  } else {\n    throw new Error('unsupported data type')\n  }\n  return sha256(data).buffer\n}\n\nsha256.hex = function (data) {\n  const sum = sha256.arrayBuffer(data)\n  return buf2hex(sum)\n}\n\nsha256.hmac = function (key,data) {\n  if (typeof data === 'string') {\n    data = encoder.encode(data)\n  } else if (ArrayBuffer.isView(data)) {\n    if (data.constructor.name === 'Uint8Array') {\n    } else {\n      throw new Error('Use Uint8Array')\n    }\n  } else if (data.constructor === ArrayBuffer) {\n    data = new Uint8Array(data)\n  } else {\n    throw new Error('unsupported data type')\n  }\n\n  if (typeof key === 'string') {\n    key = encoder.encode(key)\n  } else if (ArrayBuffer.isView(key)) {\n    if (key.constructor.name === 'Uint8Array') {\n    } else {\n      throw new Error('Use Uint8Array')\n    }\n  } else if (key.constructor === ArrayBuffer) {\n    key = new Uint8Array(key)\n  } else {\n    throw new Error('unsupported key type')\n  }\n  return hmac(key,data)\n  \n}  \n\nfunction buf2hex (buffer) { return Array.prototype.map.call(new Uint8Array(buffer), x => ('00' + x.toString(16)).slice(-2)).join('') }\n\nexport { sha256 }\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","import { Buffer } from 'buffer/index.js'\n\nconst encoder = new TextEncoder()\nconst decoder = new TextDecoder()\n\nclass MBP extends Buffer {\n  constructor() {\n    super()\n  }\n\n  static numberBuffer = numberBuffer;\n  static NB = numberBuffer;\n  static metaBuffer = metaBuffer;  \n  static MB = metaBuffer;  \n  static metaBufferArguments = metaBufferArguments;\n  static MBA = metaBufferArguments;\n\n  static readTypedBuffer = readTypedBuffer;\n  static pack = pack;\n  static unpack = unpack;\n\n  static U8 = parseUint8Array;\n  static U8pack = parseValuesIntoUint8AndConcat;\n  static hex = hex;\n}\n\nexport { MBP }\n\n\n/*\n@params:\n-type: It's string keyword that indicate datatype.\n  8, 16, 32     default:  read and write as Uint. BigEndian.\n  i8, i16,      includes 'I' then read and write as Int.\n  16L , i16l    includes 'L  then read and write as LittleEndian.\n-value:  number to store the buffer\nreturn: Buffer\n*/\n\nexport let NB = numberBuffer;\nexport function numberBuffer(type, initValue = 0) {\n  let buffer;\n  if (type === undefined || typeof type !== 'string' || typeof initValue !== 'number') {\n    throw TypeError('invlaid init variablie type name. ')\n  }\n  type = type.toUpperCase()\n\n  if (type.includes('8')) {\n    buffer = Buffer.alloc(1)\n    if (type.includes('I')) buffer.writeInt8(initValue)\n    else buffer.writeUint8(initValue)\n\n  } else if (type.includes('16')) {\n    buffer = Buffer.alloc(2)\n    if (type.includes('I')) {\n      if (type.includes('L')) buffer.writeInt16LE(initValue)\n      else buffer.writeInt16BE(initValue)\n    } else {\n      if (type.includes('L')) buffer.writeUint16LE(initValue)\n      else buffer.writeUint16BE(initValue)\n    }\n\n  } else if (type.includes('32')) {\n    buffer = Buffer.alloc(4)\n    if (type.includes('I')) {\n      if (type.includes('L')) buffer.writeInt32LE(initValue)\n      else buffer.writeInt32BE(initValue)\n    } else {\n      if (type.includes('L')) buffer.writeUint32LE(initValue)\n      else buffer.writeUint32BE(initValue)\n    }\n  } else if (type.includes('N')) {  // number as string\n    buffer = Buffer.from(String(initValue))\n  } else {\n    console.log(`invalid type: ${type} or initvalue: ${initValue}`)\n  }\n  return buffer\n\n}\n\n\n\n/*\n@name:  name of the buffer.  \n  packer and unpacker use the name.\n@type:\n  8, 16, 32     default:  read and write as Uint. BigEndian.\n  i8, i16,      includes 'I' then read and write as Int.\n  16L , i16l    includes 'L  then read and write as LittleEndian.\n@data:\n  number : new buffer will be initilized with the value.\n  buffer without type : use the buffer\n  number without type : new buffer alloc with the size\n\n  return  ['name', data:Buffer , 'type']\n*/\n\n/* \n get buffer Object with initial value & meta info( name, data type, endian , length )\n \ninput:   name, type, initValue \nreturn:  return ['name',buffer, type ]  \n\nex. new buffer 4bytes with name.\n  MB('bufname', 4)\n\nex. \n  MB('strBuffer', 'buffer store this text' )\n\nex.\n  MB('uid', '16', 0x12EF )   => name: uid, type: uint16array, bigendian, init value 0x1234.   \n  return ['uid', <Buffer 12 EF > , '16' ] \n\nex.\n  let buf = Buffer.alloc(8)\n  MB('bufname', buf )  => name: 'bufname'   8byte buffer. \n  return ['bufname', <Buffer 00 00 00 00 00 00 00 00 > ,'b' ] \n\n*/\n\nexport const MB = metaBuffer\nexport function metaBuffer(name, typeOrData, initValue) {\n  let buffer;\n  let bufferType = 'B';\n  if (typeof typeOrData === 'number') {  // this number is buffer size. not value.\n    buffer = Buffer.alloc(typeOrData)\n    if (initValue) buffer.fill(initValue)\n    bufferType = 'B'\n  } else if (typeof typeOrData === 'string' && typeof initValue === 'number') { // number with type.\n    bufferType = typeOrData.toUpperCase()  //use explicit type name\n    buffer = numberBuffer(typeOrData, initValue) // notice.  two categories.  n: number string.  8, 16, 32: typed number.  \n  } else if (typeof typeOrData === 'string' && initValue === undefined) { //  string\n    buffer = encoder.encode(typeOrData)\n    bufferType = 'S';\n  } else if (typeOrData instanceof Uint8Array && initValue === undefined) {  // buffer \n    buffer = typeOrData\n  } else if (typeOrData.constructor.name === 'ArrayBuffer' && initValue === undefined) {\n    buffer = new Uint8Array(typeOrData)\n  } else if (ArrayBuffer.isView(typeOrData)) {\n    buffer = new Uint8Array(typeOrData.buffer, typeOrData.byteOffset, typeOrData.byteLength)\n  } else if (typeof typeOrData === 'object' && initValue === undefined) {  //   object. like array. stringify\n    buffer = encoder.encode(JSON.stringify(typeOrData))\n    bufferType = 'O'\n  } else if (typeof typeOrData === 'boolean' && initValue === undefined) {  //   object. like array. stringify\n    let v = typeOrData ? 1 : 0;\n    buffer = Buffer.from([v])\n    bufferType = '!'\n  } else {\n    prn('invalid metabuffer data err', name, typeOrData, initValue)\n  }\n\n  if (typeof name === 'string' && name.includes('#')) name = ''  // \n\n  return [name, bufferType, buffer]\n\n}\n\n\nexport const MBA = metaBufferArguments\nexport function metaBufferArguments(...args) {\n  let i = 0;\n  let mba = args.map(\n    data => {\n      let argsIndex = i++;  // index number becom metabuffer's name.\n      if (typeof data === 'number') {\n        // * JS's primitive Number stored as string. \n        return MB(argsIndex, 'N', data)\n      } else {\n        // typedarray, dataview, array, object, boolean\n        return MB(argsIndex, data)\n      }\n    })\n\n  // add parameter length. \n  mba.push(MB('$', '8', mba.length))\n  return mba\n}\n\n\n\nexport function readTypedBuffer(type, buffer, offset, length) {\n  // prn('RTB type',type)\n  if (type.includes('8')) {\n    if (type.includes('I')) {\n      return buffer.readInt8(offset)\n    } else {\n      return buffer.readUint8(offset)\n    }\n  } else if (type.includes('16')) {\n    if (type.includes('I')) {\n      if (type.includes('L')) {\n        return buffer.readInt16LE(offset)\n      } else {\n        return buffer.readInt16BE(offset)\n      }\n    } else {\n      if (type.includes('L')) {\n        return buffer.readUint16LE(offset)\n      } else {\n        return buffer.readUint16BE(offset)\n      }\n    }\n\n  } else if (type.includes('32')) {\n    if (type.includes('I')) {\n      if (type.includes('L')) {\n        return buffer.readInt32LE(offset)\n      } else {\n        return buffer.readInt32BE(offset)\n      }\n    } else {\n      if (type.includes('L')) {\n        return buffer.readUint32LE(offset)\n      } else {\n        return buffer.readUint32BE(offset)\n      }\n    }\n\n  } else if (type === 'B') { //buffer\n    return buffer.slice(offset, offset + length)\n  } else if (type === 'S') { //string or arguments\n    let strBuffer = buffer.slice(offset, offset + length)\n    return decoder.decode(strBuffer)\n  } else if (type === 'N') { // number encoded as string\n    let strNumber = buffer.slice(offset, offset + length)\n    return Number(decoder.decode(strNumber))\n  } else if (type === 'O') { // object encoded string\n    let objEncoded = buffer.slice(offset, offset + length)\n    try {\n      return JSON.parse(decoder.decode(objEncoded))\n    } catch (error) {\n      console.log('err. obj parse')\n    }\n  } else if (type === '!') { // boolean  1:true 0:false\n    let v = buffer.readInt8(offset)\n    return v === 1 ? true : false\n  } else {\n    throw TypeError('invalid data')\n\n  }\n}\n\nfunction flatSubArray(args) {\n  // prn('args',args)\n  let subArr = []\n  let mainArr = args.filter(item => {\n    if (Array.isArray(item[0])) subArr = subArr.concat(item)\n    else return item\n  })\n  return mainArr.concat(subArr)\n}\n\nexport function pack(...args) {\n  let bufArr = flatSubArray(args)\n  let size = 0;\n  let info = []\n  let offset = 0\n\n  bufArr.forEach(bufPack => {\n    let [name, type, data] = bufPack\n    size += data.byteLength\n    if (typeof name === 'number' || name.length > 0) {\n      if (type.includes('N') || type.includes('B') || type.includes('S') || type.includes('O')) {\n        info.push([name, type, offset, data.byteLength])\n      } else {\n        info.push([name, type, offset])\n      }\n    }\n    offset = size;\n  })\n\n  let infoEncoded = encoder.encode(JSON.stringify(info))\n  let infoSize = infoEncoded.byteLength\n  size = size + infoSize + 2\n\n  let buffer = Buffer.alloc(size)\n  offset = 0\n  bufArr.forEach(bufPack => {\n    let buf = bufPack[2]\n    buffer.set(buf, offset)\n    offset += buf.byteLength\n  })\n\n  buffer.set(infoEncoded, offset)\n  let infoSizeBuff = NB('16', infoSize)\n  buffer.set(infoSizeBuff, offset + infoSize)\n  return buffer\n}\n\nexport function unpack(binPack) {\n  let buffer = Buffer.from(binPack)\n  let infoSize = buffer.readUInt16BE(buffer.byteLength - 2)\n  let infoFrom = buffer.byteLength - infoSize - 2;\n  let infoEncoded = buffer.subarray(infoFrom, buffer.byteLength - 2)\n  try {\n    let decoded = decoder.decode(infoEncoded)\n    let infoArr = JSON.parse(decoded)\n    let binObj = {}\n    infoArr.forEach(bufPack => {\n      let [name, type, offset, length] = bufPack\n      binObj[name] = readTypedBuffer(type, buffer, offset, length)\n    })\n\n    // set args with values\n    if (binObj.$) {\n      let argLen = binObj.$;\n      let args = []\n      for (let n = 0; n < argLen; n++) {\n        args.push(binObj[n])\n      }\n      binObj.args = args\n      binObj.$ = binObj.args  // same  .args or .$\n    }\n    // prn('binObj',binObj)\n    return binObj\n  } catch (error) {\n    console.log('unpack: invalid data.', error)\n  }\n\n}\n\n\n\n\n/* simple parser and packer */\n\n// input: any\n// return uint8Array.  \n// *point*  if input number -> output is 1 byte Uint8Array that initialized by the input number.\nexport function parseUint8Array(data) {\n\n  if (data == undefined) throw 'Invalid data type: Undefined'\n  if (typeof data === 'string') { // string > encode > uint8array\n    return encoder.encode(data)\n  } else if (typeof data === 'number') {  // number > 1 byte uint8array(number)\n    return Uint8Array.from([data])\n  } else if (data.constructor.name === 'ArrayBuffer') {  // arraybuffer > wrap uint8arra(ab)\n    return new Uint8Array(data)\n  } else if (ArrayBuffer.isView(data)) {\n    if (data.constructor.name === 'Uint8Array') {  // uint8array > return same\n      return data\n    } else {\n      return new Uint8Array(data.buffer, data.byteOffset, data.byteLength)  // DataView, TypedArray >  uint8array( use offset, length )\n    }\n  } else { // array, object \n    return encoder.encode(JSON.stringify(data))  // object(array.. )  > JSON.str > encode > unint8array\n  }\n  \n\n}\n\n// in:  arraybuffer,typedArray,DataView,number\n// return: unint8array\n// 1. normalize: any into Uint8array \n// 2. return new buffer merged.\n\nexport function parseValuesIntoUint8AndConcat(...dataArray) {\n  try {\n    let bufferSize = 0\n    let offset = 0;\n    let buffers = dataArray.map(data => parseUint8Array(data))\n    buffers.forEach(buf => { bufferSize += buf.byteLength })\n    let buffer = new Uint8Array(bufferSize)\n    buffers.forEach(buf => {\n      buffer.set(buf, offset)\n      offset += buf.byteLength\n    })\n    return buffer\n  } catch (error) {\n    console.log(error)\n\n  }\n}\n\n\nexport function hex(buffer) { \n  return Array.prototype.map.call(new Uint8Array(buffer), x => ('00' + x.toString(16)).slice(-2)).join('') \n} // arraybuffer를 hex문자열로\n\n\nfunction prn( ...data){\n  console.log(...data)\n}\n\n","import { sha256 } from './bayo-sha256.js'\nimport { MBP } from 'meta-buffer-pack'\nimport base64js from 'base64-js'\n\nexport { sha256 } from './bayo-sha256.js'\nexport { base64js }\n\n\nexport const encoder = new TextEncoder()\nexport const decoder = new TextDecoder()\n\nlet webCrypto\n\n\nlet isNode = false\ntry {\n    isNode = Object.prototype.toString.call(global.process) === '[object process]'\n} catch (e) { }\n\ntry {\n    if (isNode) {\n\n        import('crypto').then(crypto => {\n            //   console.log('loaded crypto:', crypto)\n            webCrypto = crypto.webcrypto;\n            webCryptoTest();\n        })\n        // webCrypto = crypto.webcrypto\n        // console.log('# node.js env:')\n\n\n    } else if (typeof importScripts === 'function') {\n        webCrypto = self.crypto\n        console.log('# Web Worker env')\n        webCryptoTest();\n    } else if (typeof document !== 'undefined') {\n        webCrypto = window.crypto\n        console.log('# browser env')\n        webCryptoTest();\n    }\n\n} catch (error) {\n    console.log('init try: ', error)\n}\n\n\nexport function webCryptoTest() {\n    if (typeof webCrypto.subtle !== 'object') {\n        console.log('No WebCrypto API supported.')\n        return 'WebCrypto works only https or localhost on the browser.'\n    } else {\n        console.log('webCrypto test:')\n        let rand = webCrypto.getRandomValues(new Uint8Array(40))\n        console.log('1. getRandomValues: ', rand)\n\n        webCrypto.subtle.digest('SHA-256', rand).then(sum => {\n            let hash1 = buf2hex(sum);\n            let hash2 = sha256.hex(rand);\n            console.log('A.Compare binary hash sums')\n            console.log('1. subtle.digest.sha256: ', hash1)\n            console.log('2. js.sha256: ', hash2)\n            if (hash1 === hash2) {\n                console.log('hash test: success.')\n            } else {\n                throw new Error('diffrent hash result')\n            }\n\n        })\n        let message = buf2hex(rand.buffer)\n\n        webCrypto.subtle.digest('SHA-256', encoder.encode(message)).then(sum => {\n            let hash1 = buf2hex(sum);\n            let hash2 = sha256.hex(message);\n            console.log('B.Compare string hash sums')\n            console.log('1. subtle.digest.sha256: ', hash1)\n            console.log('2. js.sha256: ', hash2)\n            if (hash1 === hash2) {\n                console.log('hash test: success.')\n            } else {\n                throw new Error('diffrent hash result')\n            }\n\n        })\n\n    }\n}\n\n// let c = await import('crypto')\n// webCrypto = c.webcrypto;\n// console.log(webCrypto);\n// console.log(webCrypto.getRandomValues( new Uint8Array(8))) ;\n\n\n\n\n/*\n    문자열을 UTF8호환 TextEncoder로 encode 하여 버퍼로 변환후 암호화한뒤 base64 문자열로 반환한다.\n    특징 및 제한\n    1. randomize size.  : 매 암호화시마다 암호결과값의 크기가 달라진다.(현재 0~64 랜덤추가됨)   메시지폭 검사 대항.\n    2. control strength of key:  중첩해쉬를 통한 암호키 생성방식으로 강도 조절.\n                                2 ^ n 번 중첩연산됨. n은 10~16 충분. 너무크면 시간이 오래걸리므로 주의.\n                                현재, 16까지만 되도록 제한걸어둠.\n\n    3. 메시지 크기는 2 ^ 16 까지만 되도록 제한함. 문자열이라 64KB정도로 제한함.\n\n    암호화 결과 데이타 버퍼 구조.\n    +---------+-------+----------+\n    데이타명:   index   bytesize.\n    msg:        [0]     1 ~ 64KB\n    hmac:       [-67]   32 Bytes\n    salt:       [-35]   32 Bytes\n    nPower:     [-3]    1 Bytes\n    msgLen:     [-2]    2 Bytes\n*/\n\nconst msgPos = { msg: 0, hmac: -67, salt: -35, nPower: -3, msgLen: -2 }\nexport function encryptMsg(msg, key, nPower = 10) {\n    const msgBuffer = encoder.encode(msg)\n    const realMsgLen = msgBuffer.byteLength\n    const saltBin = webCrypto.getRandomValues(new Uint8Array(32))\n    // var saltBin = new Uint8Array(32) ;\n    const randomSize = realMsgLen + parseInt(webCrypto.getRandomValues(new Uint8Array(1))[0] / 4) // 0~63.\n    // var randomSize = 4;\n    if (randomSize > 65536) {\n        console.log('over msg size limit: it support about 64KB ascii characters.  or about 20K  UTF-8 characters ')\n        return ''\n    }\n    if (nPower > 20) {\n        console.log('over ntimeKey limit: 16 max.')\n        return ''\n    }\n    // 다른형식의 데이타나 손상된 메시지 체크도 필요함.  이값이 너무 커지면 멈춤.\n    // 현재는 특정사이트용 간단한 구현.  공개lib형의 경우 추가로 메시지 체크섬,  메시지 시간, 규칙, 에러핸들링 추가요함.\n\n    const msgBufferExpanded = new Uint8Array(randomSize)\n    msgBufferExpanded.set(msgBuffer)\n    const saltStr = buf2hex(saltBin.buffer)\n    const masterKeyArr = new Uint8Array(nTimesHash(saltStr + key, Math.pow(2, nPower)))\n\n    let hmac = sha256.hmac(masterKeyArr, msgBuffer)\n\n    bayoXSync(msgBufferExpanded, masterKeyArr, 0)\n    const base64Buffer = new Uint8Array(msgBufferExpanded.byteLength + hmac.byteLength + saltBin.byteLength + 3)\n    base64Buffer.set(msgBufferExpanded)\n\n    base64Buffer.set(hmac, base64Buffer.byteLength + msgPos.hmac)\n    base64Buffer.set(saltBin, base64Buffer.byteLength + msgPos.salt)\n    base64Buffer[base64Buffer.byteLength + msgPos.nPower] = nPower\n    const dv = new DataView(base64Buffer.buffer)\n    dv.setUint16(base64Buffer.byteLength + msgPos.msgLen, msgBufferExpanded.byteLength)\n    return base64js.fromByteArray(base64Buffer)\n}\n\n\n\nexport function decryptMsg(b64msg, key) {\n    const totalBuffer = base64js.toByteArray(b64msg)\n    const dv = new DataView(totalBuffer.buffer)\n    const msgLen = dv.getUint16(totalBuffer.byteLength + msgPos.msgLen)\n    const expandedMsgBuffer = totalBuffer.slice(0, msgLen)\n    const saltBin = totalBuffer.slice(msgPos.salt, msgPos.nPower)\n    const hmacRead = totalBuffer.slice(msgPos.hmac, msgPos.salt)\n\n    const nPower = dv.getUint8(totalBuffer.byteLength + msgPos.nPower)\n    if (nPower > 20) {\n        console.log('warning: too much nPower:' + nPower)\n        return 'nPower 값이 너무큰것같음'\n    }\n    const saltStr = buf2hex(saltBin.buffer)\n    const masterKeyArr = new Uint8Array(nTimesHash(saltStr + key, Math.pow(2, nPower)))\n    bayoXSync(expandedMsgBuffer, masterKeyArr, 0)\n    const realMsgBuffer = expandedMsgBuffer.slice(0, expandedMsgBuffer.indexOf(0))\n\n    let hmac = sha256.hmac(masterKeyArr, realMsgBuffer)\n\n    if (!equal(hmac, hmacRead)) return 'BROKEN'\n    const msg = decoder.decode(realMsgBuffer)\n\n    return msg\n}\n\nexport function buf2hex(buffer) { return Array.prototype.map.call(new Uint8Array(buffer), x => ('00' + x.toString(16)).slice(-2)).join('') } // arraybuffer를 hex문자열로\n\n\nexport function bayoXSync(data, key, otpStartIndex = 0) {\n\n    let cryptoKey\n    if (key === null || key === undefined || key === '') {\n        throw 'bayoX: cryptoKey is null or undefined'\n    } else if (key.constructor === ArrayBuffer) {\n        cryptoKey = new Uint8Array(key)\n    } else if (typeof key === 'string') {\n        cryptoKey = new Uint8Array(sha256.arrayBuffer(key))\n\n    } else if (ArrayBuffer.isView(key)) {\n        if (key.constructor.name === 'Uint8Array') {\n            cryptoKey = key\n        } else {\n            throw new Error('Use Uint8Array')\n        }\n    } else {\n        throw new Error('unsupported key data type')\n    }\n\n\n    // console.log('cryptoKey:', cryptoKey )\n    // cryptoKey check\n    if (cryptoKey.byteLength != 32) {\n        throw 'bayoX: cryptoKey byteLength dismatch. must 32Bytes'\n        return\n    }\n\n    if (typeof data === 'string') {\n        data = encoder.encode(data)\n    } else if (ArrayBuffer.isView(data)) {\n        if (data.constructor.name === 'Uint8Array') {\n        } else {\n            throw new Error('Use Uint8Array')\n        }\n    } else if (data.constructor === ArrayBuffer) {\n        data = new Uint8Array(data)\n    } else {\n        throw new Error('unsupported data type')\n    }\n\n    // const u8Arr = dataBuffer\n    const otpMasterKeyArr = new Uint32Array(9)\n    const cryptoKeyArr = new Uint32Array(cryptoKey.buffer)\n    otpMasterKeyArr.set(cryptoKeyArr)\n    otpMasterKeyArr[8] = otpStartIndex\n    const nBytes = data.byteLength\n    const nTimes = Math.ceil(nBytes / 32) // 최소값 1   ; 필요한 otp 개수\n    const lastTime = nTimes - 1 // 최소값 0\n    const nRemains = nBytes % 32\n    const buf32Len = Math.floor(nBytes / 4) // byteLength / 4 => 4바이트의 배수\n    // console.log(`bayoXCrypto src u8Arr .byteOffset: ${u8Arr.byteOffset} .byteLength: ${u8Arr.byteLength}  1/4 floored => buf32Len: ${buf32Len}`);\n\n    // 주의. 이부분은 새로운 버퍼 생성후 복제가 아니고 dataview 생성임. 공용체임.\n    const buf32 = new Uint32Array(data.buffer, data.byteOffset, buf32Len)\n\n    for (let i = 0; i < nTimes; i++) {\n        // 32바이트 단위로 원본 파일읽어서 otp 연산.\n        // 1. indexed psudo otp 생성\n        otpMasterKeyArr[8]++\n        const potp = sha256.arrayBuffer(otpMasterKeyArr.buffer)\n        const potp32 = new Uint32Array(potp)\n\n        if (i == lastTime && nRemains != 0) { // 32바이트 이하 (나머지 Byte 연산)\n            const potp8 = new Uint8Array(potp)\n            for (let q = nBytes - nRemains, r = 0; r < nRemains; r++) { // 최대 31번\n                // console.log(`q:${q} r:${r}`);\n                data[q++] ^= potp8[r] // q;버퍼의 index   r; otp의 index\n            }\n        } else { // 4Bytes 단위 8회 연산\n            for (let ib = 0; ib < 8; ib++) buf32[i * 8 + ib] ^= potp32[ib]\n        }\n    }\n\n\n    return data\n\n}\n\nexport function equal(buf1, buf2) {\n    if(buf1.byteLength != buf2.byteLength ) return false\n    for(let i = 0 ; i < buf1.byteLength; i++){\n      if(buf1[i] != buf2[i] ) return false\n    }\n  \n    return true \n  }\n  \n\n/* nTimesHash.   (PBKDF2 와 유사한 용도)\n최초  srcData로 arrayBuffer화 1회 연ㅏ 후  n회 반복.  총 hash 연산수는 n+1번임.\n입력: srcData:  참고로 문자열, UTF-8문자열 입력시 인코딩됨, array, typedarray, arraybuffer 모두 지원\n출력: arraybuffer 반환\n*/\n\nexport function nTimesHash(srcData, n) {\n    let hashSum = sha256.arrayBuffer(srcData)\n    for (let i = 0; i < n; i++) hashSum = sha256.arrayBuffer(hashSum)\n    return hashSum\n}"],"names":["K","Uint32Array","hashBlocks","w","v","p","pos","len","a","b","c","d","e","f","g","h","u","i","j","t1","t2","Hash","this","digestLength","blockSize","state","Int32Array","temp","buffer","Uint8Array","bufferLength","bytesHashed","finished","reset","prototype","clean","length","update","data","dataLength","Error","dataPos","finish","out","left","bitLenHi","bitLenLo","padLength","digest","_saveState","_restoreState","from","HMAC","key","inner","outer","pad","istate","ostate","hash","encoder","TextEncoder","TextDecoder","sha256","arrayBuffer","encode","ArrayBuffer","isView","constructor","name","hex","sum","Array","map","call","x","toString","slice","join","hmac","byteLength_1","b64","lens","getLens","validLen","placeHoldersLen","toByteArray_1","tmp","arr","Arr","_byteLength","curByte","revLookup","charCodeAt","fromByteArray_1","uint8","extraBytes","parts","maxChunkLength","len2","push","encodeChunk","lookup","code","indexOf","start","end","num","output","offset","isLE","mLen","nBytes","m","eLen","eMax","eBias","nBits","s","NaN","Infinity","Math","pow","value","rt","abs","isNaN","floor","log","LN2","customInspectSymbol","Symbol","exports","Buffer","SlowBuffer","alloc","INSPECT_MAX_BYTES","K_MAX_LENGTH","createBuffer","RangeError","buf","Object","setPrototypeOf","arg","encodingOrOffset","TypeError","allocUnsafe","string","encoding","isEncoding","byteLength","actual","write","fromString","arrayView","isInstance","copy","fromArrayBuffer","byteOffset","fromArrayLike","fromArrayView","SharedArrayBuffer","valueOf","obj","isBuffer","checked","undefined","numberIsNaN","type","isArray","fromObject","toPrimitive","assertSize","size","array","mustMatch","arguments","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","n","bidirectionalIndexOf","val","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","String","read","readUInt16BE","foundIndex","found","hexWrite","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","asciiToBytes","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","base64","fromByteArray","min","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","kMaxLength","TYPED_ARRAY_SUPPORT","proto","foo","typedArraySupport","console","error","defineProperty","enumerable","get","poolSize","fill","allocUnsafeSlow","_isBuffer","compare","y","concat","list","set","swap16","swap32","swap64","toLocaleString","equals","inspect","max","replace","trim","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","ret","hexSliceLookupTable","bytes","checkOffset","ext","checkInt","wrtBigUInt64LE","checkIntBI","BigInt","wrtBigUInt64BE","checkIEEE754","writeFloat","littleEndian","noAssert","ieee754","writeDouble","newBuf","subarray","readUintLE","readUIntLE","mul","readUintBE","readUIntBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readUInt32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","first","last","boundsError","readBigUInt64BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readBigInt64LE","readBigInt64BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUintLE","writeUIntLE","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","errors","E","sym","getMessage","Base","super","writable","configurable","stack","message","addNumericalSeparator","range","ERR_OUT_OF_RANGE","checkBounds","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","input","msg","received","isInteger","INVALID_BASE64_RE","leadSurrogate","toByteArray","split","base64clean","src","dst","alphabet","table","i16","fn","BufferBigIntNotDefined","decoder","webCrypto","isNode","global","process","import","then","crypto","webcrypto","webCryptoTest","importScripts","self","document","window","subtle","rand","getRandomValues","hash1","buf2hex","hash2","msgPos","encryptMsg","nPower","msgBuffer","realMsgLen","saltBin","randomSize","msgBufferExpanded","saltStr","masterKeyArr","nTimesHash","bayoXSync","base64Buffer","DataView","setUint16","base64js","decryptMsg","b64msg","totalBuffer","dv","msgLen","getUint16","expandedMsgBuffer","hmacRead","getUint8","realMsgBuffer","equal","decode","otpStartIndex","cryptoKey","otpMasterKeyArr","cryptoKeyArr","nTimes","ceil","lastTime","nRemains","buf32Len","buf32","potp","potp32","potp8","q","r","ib","buf1","buf2","srcData","hashSum"],"mappings":"AAmBA,MAAMA,EAAI,IAAIC,YAAY,CACxB,WAAY,WAAY,WAAY,WAAY,UAChD,WAAY,WAAY,WAAY,WAAY,UAChD,UAAY,WAAY,WAAY,WAAY,WAChD,WAAY,WAAY,WAAY,UAAY,UAChD,UAAY,WAAY,WAAY,WAAY,WAChD,WAAY,WAAY,WAAY,WAAY,WAChD,UAAY,UAAY,UAAY,UAAY,WAChD,WAAY,WAAY,WAAY,WAAY,WAChD,WAAY,WAAY,WAAY,WAAY,WAChD,WAAY,WAAY,UAAY,UAAY,UAChD,UAAY,UAAY,UAAY,WAAY,WAChD,WAAY,WAAY,WAAY,WAAY,WAChD,WAAY,WAAY,WAAY,aAEtC,SAASC,EAAYC,EAAGC,EAAGC,EAAGC,EAAKC,GACjC,IAAIC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAIC,EACzC,KAAOb,GAAO,IAAI,CAShB,IARAC,EAAIJ,EAAE,GACNK,EAAIL,EAAE,GACNM,EAAIN,EAAE,GACNO,EAAIP,EAAE,GACNQ,EAAIR,EAAE,GACNS,EAAIT,EAAE,GACNU,EAAIV,EAAE,GACNW,EAAIX,EAAE,GACDa,EAAI,EAAGA,EAAI,GAAIA,IAClBC,EAAIZ,EAAU,EAAJW,EACVd,EAAEc,IAAe,IAAPZ,EAAEa,KAAc,IAAmB,IAAXb,EAAEa,EAAI,KAAc,IAC/B,IAAXb,EAAEa,EAAI,KAAc,EAAiB,IAAXb,EAAEa,EAAI,GAE9C,IAAKD,EAAI,GAAIA,EAAI,GAAIA,IACnBD,EAAIb,EAAEc,EAAI,GACVE,GAAMH,IAAM,GAAKA,GAAM,KAAaA,IAAM,GAAKA,GAAC,IAAkBA,IAAM,GACxEA,EAAIb,EAAEc,EAAI,IACVG,GAAMJ,IAAM,EAAIA,GAAM,KAAYA,IAAM,GAAKA,GAAC,IAAkBA,IAAM,EACtEb,EAAEc,IAAME,EAAKhB,EAAEc,EAAI,GAAK,IAAMG,EAAKjB,EAAEc,EAAI,IAAM,GAEjD,IAAKA,EAAI,EAAGA,EAAI,GAAIA,IAClBE,KAAUP,IAAM,EAAIA,GAAM,KAAYA,IAAM,GAAKA,GAAC,KACvCA,IAAM,GAAKA,QAAqBA,EAAIC,GAAOD,EAAIE,GAAO,IACrDC,GAAMf,EAAEiB,GAAKd,EAAEc,GAAM,GAAM,GAAM,EAC7CG,IAAQZ,IAAM,EAAIA,GAAC,KAAiBA,IAAM,GAAKA,GAAC,KACrCA,IAAM,GAAKA,GAAC,MAAoBA,EAAIC,EAAMD,EAAIE,EAAMD,EAAIC,GAAO,EAC1EK,EAAID,EACJA,EAAID,EACJA,EAAID,EACJA,EAAKD,EAAIQ,EAAM,EACfR,EAAID,EACJA,EAAID,EACJA,EAAID,EACJA,EAAKW,EAAKC,EAAM,EAElBhB,EAAE,IAAMI,EACRJ,EAAE,IAAMK,EACRL,EAAE,IAAMM,EACRN,EAAE,IAAMO,EACRP,EAAE,IAAMQ,EACRR,EAAE,IAAMS,EACRT,EAAE,IAAMU,EACRV,EAAE,IAAMW,EACRT,GAAO,GACPC,GAAO,GAET,OAAOD,EAGT,MAAMe,EAAsB,WAC1B,SAASA,IACPC,KAAKC,aAxEiB,GAyEtBD,KAAKE,UAxEc,GA0EnBF,KAAKG,MAAQ,IAAIC,WAAW,GAC5BJ,KAAKK,KAAO,IAAID,WAAW,IAC3BJ,KAAKM,OAAS,IAAIC,WAAW,KAC7BP,KAAKQ,aAAe,EACpBR,KAAKS,YAAc,EACnBT,KAAKU,UAAW,EAChBV,KAAKW,QAoHP,OAhHAZ,EAAKa,UAAUD,MAAQ,WAYrB,OAXAX,KAAKG,MAAM,GAAK,WAChBH,KAAKG,MAAM,GAAK,WAChBH,KAAKG,MAAM,GAAK,WAChBH,KAAKG,MAAM,GAAK,WAChBH,KAAKG,MAAM,GAAK,WAChBH,KAAKG,MAAM,GAAK,WAChBH,KAAKG,MAAM,GAAK,UAChBH,KAAKG,MAAM,GAAK,WAChBH,KAAKQ,aAAe,EACpBR,KAAKS,YAAc,EACnBT,KAAKU,UAAW,EACTV,MAGTD,EAAKa,UAAUC,MAAQ,WACrB,IAAK,IAAIlB,EAAI,EAAGA,EAAIK,KAAKM,OAAOQ,OAAQnB,IACtCK,KAAKM,OAAOX,GAAK,EAEnB,IAASA,EAAI,EAAGA,EAAIK,KAAKK,KAAKS,OAAQnB,IACpCK,KAAKK,KAAKV,GAAK,EAEjBK,KAAKW,SASPZ,EAAKa,UAAUG,OAAS,SAAUC,EAAMC,GAEtC,QADmB,IAAfA,IAAyBA,EAAaD,EAAKF,QAC3Cd,KAAKU,SACP,MAAM,IAAIQ,MAAM,mDAElB,IAAIC,EAAU,EAEd,GADAnB,KAAKS,aAAeQ,EAChBjB,KAAKQ,aAAe,EAAG,CACzB,KAAOR,KAAKQ,aAAe,IAAMS,EAAa,GAC5CjB,KAAKM,OAAON,KAAKQ,gBAAkBQ,EAAKG,KACxCF,IAEwB,KAAtBjB,KAAKQ,eACP5B,EAAWoB,KAAKK,KAAML,KAAKG,MAAOH,KAAKM,OAAQ,EAAG,IAClDN,KAAKQ,aAAe,GAOxB,IAJIS,GAAc,KAChBE,EAAUvC,EAAWoB,KAAKK,KAAML,KAAKG,MAAOa,EAAMG,EAASF,GAC3DA,GAAc,IAETA,EAAa,GAClBjB,KAAKM,OAAON,KAAKQ,gBAAkBQ,EAAKG,KACxCF,IAEF,OAAOjB,MAKTD,EAAKa,UAAUQ,OAAS,SAAUC,GAChC,IAAKrB,KAAKU,SAAU,CAClB,MAAMD,EAAcT,KAAKS,YACnBa,EAAOtB,KAAKQ,aACZe,EAAYd,EAAc,UAAc,EACxCe,EAAWf,GAAe,EAC1BgB,EAAahB,EAAc,GAAK,GAAM,GAAK,IACjDT,KAAKM,OAAOgB,GAAQ,IACpB,IAAK,IAAI3B,EAAI2B,EAAO,EAAG3B,EAAI8B,EAAY,EAAG9B,IACxCK,KAAKM,OAAOX,GAAK,EAEnBK,KAAKM,OAAOmB,EAAY,GAAMF,IAAa,GAAM,IACjDvB,KAAKM,OAAOmB,EAAY,GAAMF,IAAa,GAAM,IACjDvB,KAAKM,OAAOmB,EAAY,GAAMF,IAAa,EAAK,IAChDvB,KAAKM,OAAOmB,EAAY,GAAMF,IAAa,EAAK,IAChDvB,KAAKM,OAAOmB,EAAY,GAAMD,IAAa,GAAM,IACjDxB,KAAKM,OAAOmB,EAAY,GAAMD,IAAa,GAAM,IACjDxB,KAAKM,OAAOmB,EAAY,GAAMD,IAAa,EAAK,IAChDxB,KAAKM,OAAOmB,EAAY,GAAMD,IAAa,EAAK,IAChD5C,EAAWoB,KAAKK,KAAML,KAAKG,MAAOH,KAAKM,OAAQ,EAAGmB,GAClDzB,KAAKU,UAAW,EAElB,IAASf,EAAI,EAAGA,EAAI,EAAGA,IACrB0B,EAAQ,EAAJ1B,EAAQ,GAAMK,KAAKG,MAAMR,KAAO,GAAM,IAC1C0B,EAAQ,EAAJ1B,EAAQ,GAAMK,KAAKG,MAAMR,KAAO,GAAM,IAC1C0B,EAAQ,EAAJ1B,EAAQ,GAAMK,KAAKG,MAAMR,KAAO,EAAK,IACzC0B,EAAQ,EAAJ1B,EAAQ,GAAMK,KAAKG,MAAMR,KAAO,EAAK,IAE3C,OAAOK,MAGTD,EAAKa,UAAUc,OAAS,WACtB,MAAML,EAAM,IAAId,WAAWP,KAAKC,cAEhC,OADAD,KAAKoB,OAAOC,GACLA,GAGTtB,EAAKa,UAAUe,WAAa,SAAUN,GACpC,IAAK,IAAI1B,EAAI,EAAGA,EAAIK,KAAKG,MAAMW,OAAQnB,IACrC0B,EAAI1B,GAAKK,KAAKG,MAAMR,IAIxBI,EAAKa,UAAUgB,cAAgB,SAAUC,EAAMpB,GAC7C,IAAK,IAAId,EAAI,EAAGA,EAAIK,KAAKG,MAAMW,OAAQnB,IACrCK,KAAKG,MAAMR,GAAKkC,EAAKlC,GAEvBK,KAAKS,YAAcA,EACnBT,KAAKU,UAAW,EAChBV,KAAKQ,aAAe,GAEfT,KAIH+B,EAAsB,WAC1B,SAASA,EAAMC,GACb/B,KAAKgC,MAAQ,IAAIjC,EACjBC,KAAKiC,MAAQ,IAAIlC,EACjBC,KAAKE,UAAYF,KAAKgC,MAAM9B,UAC5BF,KAAKC,aAAeD,KAAKgC,MAAM/B,aAC/B,MAAMiC,EAAM,IAAI3B,WAAWP,KAAKE,WAChC,GAAI6B,EAAIjB,OAASd,KAAKE,WACpB,IAAKH,GAAQgB,OAAOgB,GAAKX,OAAOc,GAAKrB,aAErC,IAAK,IAAIlB,EAAI,EAAGA,EAAIoC,EAAIjB,OAAQnB,IAC9BuC,EAAIvC,GAAKoC,EAAIpC,GAGjB,IAASA,EAAI,EAAGA,EAAIuC,EAAIpB,OAAQnB,IAC9BuC,EAAIvC,IAAM,GAEZK,KAAKgC,MAAMjB,OAAOmB,GAClB,IAASvC,EAAI,EAAGA,EAAIuC,EAAIpB,OAAQnB,IAC9BuC,EAAIvC,IAAM,IAEZK,KAAKiC,MAAMlB,OAAOmB,GAClBlC,KAAKmC,OAAS,IAAIxD,YAAY,GAC9BqB,KAAKoC,OAAS,IAAIzD,YAAY,GAC9BqB,KAAKgC,MAAML,WAAW3B,KAAKmC,QAC3BnC,KAAKiC,MAAMN,WAAW3B,KAAKoC,QAC3B,IAASzC,EAAI,EAAGA,EAAIuC,EAAIpB,OAAQnB,IAC9BuC,EAAIvC,GAAK,EAwCb,OAlCAmC,EAAKlB,UAAUD,MAAQ,WAGrB,OAFAX,KAAKgC,MAAMJ,cAAc5B,KAAKmC,OAAQnC,KAAKgC,MAAM9B,WACjDF,KAAKiC,MAAML,cAAc5B,KAAKoC,OAAQpC,KAAKiC,MAAM/B,WAC1CF,MAGT8B,EAAKlB,UAAUC,MAAQ,WACrB,IAAK,IAAIlB,EAAI,EAAGA,EAAIK,KAAKmC,OAAOrB,OAAQnB,IACtCK,KAAKoC,OAAOzC,GAAKK,KAAKmC,OAAOxC,GAAK,EAEpCK,KAAKgC,MAAMnB,QACXb,KAAKiC,MAAMpB,SAGbiB,EAAKlB,UAAUG,OAAS,SAAUC,GAEhC,OADAhB,KAAKgC,MAAMjB,OAAOC,GACXhB,MAGT8B,EAAKlB,UAAUQ,OAAS,SAAUC,GAOhC,OANIrB,KAAKiC,MAAMvB,SACbV,KAAKiC,MAAMb,OAAOC,IAElBrB,KAAKgC,MAAMZ,OAAOC,GAClBrB,KAAKiC,MAAMlB,OAAOM,EAAKrB,KAAKC,cAAcmB,OAAOC,IAE5CrB,MAGT8B,EAAKlB,UAAUc,OAAS,WACtB,MAAML,EAAM,IAAId,WAAWP,KAAKC,cAEhC,OADAD,KAAKoB,OAAOC,GACLA,GAEFS,KAIF,SAASO,EAAMrB,GACpB,MAAMvB,GAAI,IAAKM,GAAQgB,OAAOC,GACxBU,EAASjC,EAAEiC,SAEjB,OADAjC,EAAEoB,QACKa,EChST,MAAMY,EAAU,IAAIC,YACJ,IAAIC,YAEpBC,EAAOC,YAAc,SAAU1B,GAE7B,GAAoB,iBAATA,EAETA,EAAOsB,EAAQK,OAAO3B,QACjB,GAAI4B,YAAYC,OAAO7B,IAC5B,GAA8B,eAA1BA,EAAK8B,YAAYC,KAGnB,MAAM,IAAI7B,MAAM,sBAEb,CAAA,GAAIF,EAAK8B,cAAgBF,YAI9B,MAAM,IAAI1B,MAAM,yBAFhBF,EAAO,IAAIT,WAAWS,GAIxB,OAAOyB,EAAOzB,GAAMV,QAGtBmC,EAAOO,IAAM,SAAUhC,GACrB,MAAMiC,EAAMR,EAAOC,YAAY1B,GAC/B,OAiCgBV,EAjCD2C,EAiCkBC,MAAMtC,UAAUuC,IAAIC,KAAK,IAAI7C,WAAWD,IAAS+C,IAAM,KAAOA,EAAEC,SAAS,KAAKC,OAAO,KAAIC,KAAK,IAAjI,IAAkBlD,GA9BlBmC,EAAOgB,KAAO,SAAU1B,EAAIf,GAC1B,GAAoB,iBAATA,EACTA,EAAOsB,EAAQK,OAAO3B,QACjB,GAAI4B,YAAYC,OAAO7B,IAC5B,GAA8B,eAA1BA,EAAK8B,YAAYC,KAEnB,MAAM,IAAI7B,MAAM,sBAEb,CAAA,GAAIF,EAAK8B,cAAgBF,YAG9B,MAAM,IAAI1B,MAAM,yBAFhBF,EAAO,IAAIT,WAAWS,GAKxB,GAAmB,iBAARe,EACTA,EAAMO,EAAQK,OAAOZ,QAChB,GAAIa,YAAYC,OAAOd,IAC5B,GAA6B,eAAzBA,EAAIe,YAAYC,KAElB,MAAM,IAAI7B,MAAM,sBAEb,CAAA,GAAIa,EAAIe,cAAgBF,YAG7B,MAAM,IAAI1B,MAAM,wBAFhBa,EAAM,IAAIxB,WAAWwB,GAIvB,OD+OK,SAAeA,EAAKf,GACzB,MAAMvB,EAAI,IAAKqC,EAAKC,GAAMhB,OAAOC,GAC3BU,EAASjC,EAAEiC,SAEjB,OADAjC,EAAEoB,QACKa,ECnPA+B,CAAK1B,EAAIf,IC/ClB,IATA,IAAA0C,EAuCA,SAAqBC,GACnB,IAAIC,EAAOC,EAAQF,GACfG,EAAWF,EAAK,GAChBG,EAAkBH,EAAK,GAC3B,OAAuC,GAA9BE,EAAWC,GAAuB,EAAKA,GA1ClDC,EAiDA,SAAsBL,GACpB,IAAIM,EAcAtE,EAbAiE,EAAOC,EAAQF,GACfG,EAAWF,EAAK,GAChBG,EAAkBH,EAAK,GAEvBM,EAAM,IAAIC,EAVhB,SAAsBR,EAAKG,EAAUC,GACnC,OAAuC,GAA9BD,EAAWC,GAAuB,EAAKA,EAS9BK,CAAYT,EAAKG,EAAUC,IAEzCM,EAAU,EAGVpF,EAAM8E,EAAkB,EACxBD,EAAW,EACXA,EAGJ,IAAKnE,EAAI,EAAGA,EAAIV,EAAKU,GAAK,EACxBsE,EACGK,EAAUX,EAAIY,WAAW5E,KAAO,GAChC2E,EAAUX,EAAIY,WAAW5E,EAAI,KAAO,GACpC2E,EAAUX,EAAIY,WAAW5E,EAAI,KAAO,EACrC2E,EAAUX,EAAIY,WAAW5E,EAAI,IAC/BuE,EAAIG,KAAcJ,GAAO,GAAM,IAC/BC,EAAIG,KAAcJ,GAAO,EAAK,IAC9BC,EAAIG,KAAmB,IAANJ,EAGK,IAApBF,IACFE,EACGK,EAAUX,EAAIY,WAAW5E,KAAO,EAChC2E,EAAUX,EAAIY,WAAW5E,EAAI,KAAO,EACvCuE,EAAIG,KAAmB,IAANJ,GAGK,IAApBF,IACFE,EACGK,EAAUX,EAAIY,WAAW5E,KAAO,GAChC2E,EAAUX,EAAIY,WAAW5E,EAAI,KAAO,EACpC2E,EAAUX,EAAIY,WAAW5E,EAAI,KAAO,EACvCuE,EAAIG,KAAcJ,GAAO,EAAK,IAC9BC,EAAIG,KAAmB,IAANJ,GAGnB,OAAOC,GA3FTM,EAkHA,SAAwBC,GAQtB,IAPA,IAAIR,EACAhF,EAAMwF,EAAM3D,OACZ4D,EAAazF,EAAM,EACnB0F,EAAQ,GACRC,EAAiB,MAGZjF,EAAI,EAAGkF,EAAO5F,EAAMyF,EAAY/E,EAAIkF,EAAMlF,GAAKiF,EACtDD,EAAMG,KAAKC,EAAYN,EAAO9E,EAAIA,EAAIiF,EAAkBC,EAAOA,EAAQlF,EAAIiF,IAI1D,IAAfF,GACFT,EAAMQ,EAAMxF,EAAM,GAClB0F,EAAMG,KACJE,EAAOf,GAAO,GACde,EAAQf,GAAO,EAAK,IACpB,OAEsB,IAAfS,IACTT,GAAOQ,EAAMxF,EAAM,IAAM,GAAKwF,EAAMxF,EAAM,GAC1C0F,EAAMG,KACJE,EAAOf,GAAO,IACde,EAAQf,GAAO,EAAK,IACpBe,EAAQf,GAAO,EAAK,IACpB,MAIJ,OAAOU,EAAMnB,KAAK,KA9IhBwB,EAAS,GACTV,EAAY,GACZH,EAA4B,oBAAf5D,WAA6BA,WAAa2C,MAEvD+B,EAAO,mEACFtF,EAAI,EAAGV,EAAMgG,EAAKnE,OAAQnB,EAAIV,IAAOU,EAC5CqF,EAAOrF,GAAKsF,EAAKtF,GACjB2E,EAAUW,EAAKV,WAAW5E,IAAMA,EAQlC,SAASkE,EAASF,GAChB,IAAI1E,EAAM0E,EAAI7C,OAEd,GAAI7B,EAAM,EAAI,EACZ,MAAM,IAAIiC,MAAM,kDAKlB,IAAI4C,EAAWH,EAAIuB,QAAQ,KAO3B,OANkB,IAAdpB,IAAiBA,EAAW7E,GAMzB,CAAC6E,EAJcA,IAAa7E,EAC/B,EACA,EAAK6E,EAAW,GAsEtB,SAASiB,EAAaN,EAAOU,EAAOC,GAGlC,IAFA,IAAInB,EARoBoB,EASpBC,EAAS,GACJ3F,EAAIwF,EAAOxF,EAAIyF,EAAKzF,GAAK,EAChCsE,GACIQ,EAAM9E,IAAM,GAAM,WAClB8E,EAAM9E,EAAI,IAAM,EAAK,QACP,IAAf8E,EAAM9E,EAAI,IACb2F,EAAOR,KAdFE,GADiBK,EAeMpB,IAdT,GAAK,IACxBe,EAAOK,GAAO,GAAK,IACnBL,EAAOK,GAAO,EAAI,IAClBL,EAAa,GAANK,IAaT,OAAOC,EAAO9B,KAAK,IAjGrBc,EAAU,IAAIC,WAAW,IAAM,GAC/BD,EAAU,IAAIC,WAAW,IAAM,4DClBhB,SAAUjE,EAAQiF,EAAQC,EAAMC,EAAMC,GACnD,IAAIpG,EAAGqG,EACHC,EAAiB,EAATF,EAAcD,EAAO,EAC7BI,GAAQ,GAAKD,GAAQ,EACrBE,EAAQD,GAAQ,EAChBE,GAAS,EACTpG,EAAI6F,EAAQE,EAAS,EAAK,EAC1BrG,EAAImG,GAAQ,EAAI,EAChBQ,EAAI1F,EAAOiF,EAAS5F,GAOxB,IALAA,GAAKN,EAELC,EAAI0G,GAAM,IAAOD,GAAU,EAC3BC,KAAQD,EACRA,GAASH,EACFG,EAAQ,EAAGzG,EAAS,IAAJA,EAAWgB,EAAOiF,EAAS5F,GAAIA,GAAKN,EAAG0G,GAAS,GAKvE,IAHAJ,EAAIrG,GAAM,IAAOyG,GAAU,EAC3BzG,KAAQyG,EACRA,GAASN,EACFM,EAAQ,EAAGJ,EAAS,IAAJA,EAAWrF,EAAOiF,EAAS5F,GAAIA,GAAKN,EAAG0G,GAAS,GAEvE,GAAU,IAANzG,EACFA,EAAI,EAAIwG,MACH,CAAA,GAAIxG,IAAMuG,EACf,OAAOF,EAAIM,IAAsBC,EAAAA,GAAdF,GAAK,EAAI,GAE5BL,GAAQQ,KAAKC,IAAI,EAAGX,GACpBnG,GAAQwG,EAEV,OAAQE,GAAK,EAAI,GAAKL,EAAIQ,KAAKC,IAAI,EAAG9G,EAAImG,MAG5B,SAAUnF,EAAQ+F,EAAOd,EAAQC,EAAMC,EAAMC,GAC3D,IAAIpG,EAAGqG,EAAGvG,EACNwG,EAAiB,EAATF,EAAcD,EAAO,EAC7BI,GAAQ,GAAKD,GAAQ,EACrBE,EAAQD,GAAQ,EAChBS,EAAe,KAATb,EAAcU,KAAKC,IAAI,GAAI,IAAMD,KAAKC,IAAI,GAAI,IAAM,EAC1DzG,EAAI6F,EAAO,EAAKE,EAAS,EACzBrG,EAAImG,EAAO,GAAK,EAChBQ,EAAIK,EAAQ,GAAgB,IAAVA,GAAe,EAAIA,EAAQ,EAAK,EAAI,EAmC1D,IAjCAA,EAAQF,KAAKI,IAAIF,GAEbG,MAAMH,IAAUA,IAAUH,EAAAA,GAC5BP,EAAIa,MAAMH,GAAS,EAAI,EACvB/G,EAAIuG,IAEJvG,EAAI6G,KAAKM,MAAMN,KAAKO,IAAIL,GAASF,KAAKQ,KAClCN,GAASjH,EAAI+G,KAAKC,IAAI,GAAI9G,IAAM,IAClCA,IACAF,GAAK,IAGLiH,GADE/G,EAAIwG,GAAS,EACNQ,EAAKlH,EAELkH,EAAKH,KAAKC,IAAI,EAAG,EAAIN,IAEpB1G,GAAK,IACfE,IACAF,GAAK,GAGHE,EAAIwG,GAASD,GACfF,EAAI,EACJrG,EAAIuG,GACKvG,EAAIwG,GAAS,GACtBH,GAAMU,EAAQjH,EAAK,GAAK+G,KAAKC,IAAI,EAAGX,GACpCnG,GAAQwG,IAERH,EAAIU,EAAQF,KAAKC,IAAI,EAAGN,EAAQ,GAAKK,KAAKC,IAAI,EAAGX,GACjDnG,EAAI,IAIDmG,GAAQ,EAAGnF,EAAOiF,EAAS5F,GAAS,IAAJgG,EAAUhG,GAAKN,EAAGsG,GAAK,IAAKF,GAAQ,GAI3E,IAFAnG,EAAKA,GAAKmG,EAAQE,EAClBC,GAAQH,EACDG,EAAO,EAAGtF,EAAOiF,EAAS5F,GAAS,IAAJL,EAAUK,GAAKN,EAAGC,GAAK,IAAKsG,GAAQ,GAE1EtF,EAAOiF,EAAS5F,EAAIN,IAAU,IAAJ2G;;;;;;;;gBCvE5B,MAAMY,EACe,mBAAXC,QAAkD,mBAAlBA,OAAY,IAChDA,OAAY,IAAE,8BACd,KAENC,EAAAC,OAAiBA,EACjBD,EAAAE,WAyTA,SAAqBlG,GAInB,OAHKA,GAAUA,IACbA,EAAS,GAEJiG,EAAOE,OAAOnG,IA5TvBgG,EAAAI,kBAA4B,GAE5B,MAAMC,EAAe,WAwDrB,SAASC,EAActG,GACrB,GAAIA,EAASqG,EACX,MAAM,IAAIE,WAAW,cAAgBvG,EAAS,kCAGhD,MAAMwG,EAAM,IAAI/G,WAAWO,GAE3B,OADAyG,OAAOC,eAAeF,EAAKP,EAAOnG,WAC3B0G,EAaT,SAASP,EAAQU,EAAKC,EAAkB5G,GAEtC,GAAmB,iBAAR2G,EAAkB,CAC3B,GAAgC,iBAArBC,EACT,MAAM,IAAIC,UACR,sEAGJ,OAAOC,EAAYH,GAErB,OAAO5F,EAAK4F,EAAKC,EAAkB5G,GAKrC,SAASe,EAAMwE,EAAOqB,EAAkB5G,GACtC,GAAqB,iBAAVuF,EACT,OAqHJ,SAAqBwB,EAAQC,GAK3B,GAJwB,iBAAbA,GAAsC,KAAbA,IAClCA,EAAW,SAGRf,EAAOgB,WAAWD,GACrB,MAAM,IAAIH,UAAU,qBAAuBG,GAG7C,MAAMhH,EAAwC,EAA/BkH,EAAWH,EAAQC,GAClC,IAAIR,EAAMF,EAAatG,GAEvB,MAAMmH,EAASX,EAAIY,MAAML,EAAQC,GASjC,OAPIG,IAAWnH,IAIbwG,EAAMA,EAAI/D,MAAM,EAAG0E,IAGdX,EA1IEa,CAAW9B,EAAOqB,GAG3B,GAAI9E,YAAYC,OAAOwD,GACrB,OAkJJ,SAAwB+B,GACtB,GAAIC,EAAWD,EAAW7H,YAAa,CACrC,MAAM+H,EAAO,IAAI/H,WAAW6H,GAC5B,OAAOG,EAAgBD,EAAKhI,OAAQgI,EAAKE,WAAYF,EAAKN,YAE5D,OAAOS,EAAcL,GAvJZM,CAAcrC,GAGvB,GAAa,MAATA,EACF,MAAM,IAAIsB,UACR,yHACiDtB,GAIrD,GAAIgC,EAAWhC,EAAOzD,cACjByD,GAASgC,EAAWhC,EAAM/F,OAAQsC,aACrC,OAAO2F,EAAgBlC,EAAOqB,EAAkB5G,GAGlD,GAAiC,oBAAtB6H,oBACNN,EAAWhC,EAAOsC,oBAClBtC,GAASgC,EAAWhC,EAAM/F,OAAQqI,oBACrC,OAAOJ,EAAgBlC,EAAOqB,EAAkB5G,GAGlD,GAAqB,iBAAVuF,EACT,MAAM,IAAIsB,UACR,yEAIJ,MAAMiB,EAAUvC,EAAMuC,SAAWvC,EAAMuC,UACvC,GAAe,MAAXA,GAAmBA,IAAYvC,EACjC,OAAOU,EAAOlF,KAAK+G,EAASlB,EAAkB5G,GAGhD,MAAM3B,EAkJR,SAAqB0J,GACnB,GAAI9B,EAAO+B,SAASD,GAAM,CACxB,MAAM5J,EAA4B,EAAtB8J,EAAQF,EAAI/H,QAClBwG,EAAMF,EAAanI,GAEzB,OAAmB,IAAfqI,EAAIxG,QAIR+H,EAAIP,KAAKhB,EAAK,EAAG,EAAGrI,GAHXqI,EAOX,YAAmB0B,IAAfH,EAAI/H,OACoB,iBAAf+H,EAAI/H,QAAuBmI,EAAYJ,EAAI/H,QAC7CsG,EAAa,GAEfqB,EAAcI,GAGN,WAAbA,EAAIK,MAAqBhG,MAAMiG,QAAQN,EAAI7H,MACtCyH,EAAcI,EAAI7H,WAD3B,EAtKUoI,CAAW/C,GACrB,GAAIlH,EAAG,OAAOA,EAEd,GAAsB,oBAAX0H,QAAgD,MAAtBA,OAAOwC,aACH,mBAA9BhD,EAAMQ,OAAOwC,aACtB,OAAOtC,EAAOlF,KAAKwE,EAAMQ,OAAOwC,aAAa,UAAW3B,EAAkB5G,GAG5E,MAAM,IAAI6G,UACR,yHACiDtB,GAqBrD,SAASiD,EAAYC,GACnB,GAAoB,iBAATA,EACT,MAAM,IAAI5B,UAAU,0CACf,GAAI4B,EAAO,EAChB,MAAM,IAAIlC,WAAW,cAAgBkC,EAAO,kCA4BhD,SAAS3B,EAAa2B,GAEpB,OADAD,EAAWC,GACJnC,EAAamC,EAAO,EAAI,EAAoB,EAAhBR,EAAQQ,IAwC7C,SAASd,EAAee,GACtB,MAAM1I,EAAS0I,EAAM1I,OAAS,EAAI,EAA4B,EAAxBiI,EAAQS,EAAM1I,QAC9CwG,EAAMF,EAAatG,GACzB,IAAK,IAAInB,EAAI,EAAGA,EAAImB,EAAQnB,GAAK,EAC/B2H,EAAI3H,GAAgB,IAAX6J,EAAM7J,GAEjB,OAAO2H,EAWT,SAASiB,EAAiBiB,EAAOhB,EAAY1H,GAC3C,GAAI0H,EAAa,GAAKgB,EAAMxB,WAAaQ,EACvC,MAAM,IAAInB,WAAW,wCAGvB,GAAImC,EAAMxB,WAAaQ,GAAc1H,GAAU,GAC7C,MAAM,IAAIuG,WAAW,wCAGvB,IAAIC,EAYJ,OAVEA,OADiB0B,IAAfR,QAAuCQ,IAAXlI,EACxB,IAAIP,WAAWiJ,QACDR,IAAXlI,EACH,IAAIP,WAAWiJ,EAAOhB,GAEtB,IAAIjI,WAAWiJ,EAAOhB,EAAY1H,GAI1CyG,OAAOC,eAAeF,EAAKP,EAAOnG,WAE3B0G,EA4BT,SAASyB,EAASjI,GAGhB,GAAIA,GAAUqG,EACZ,MAAM,IAAIE,WAAW,0DACaF,EAAa7D,SAAS,IAAM,UAEhE,OAAgB,EAATxC,EAuGT,SAASkH,EAAYH,EAAQC,GAC3B,GAAIf,EAAO+B,SAASjB,GAClB,OAAOA,EAAO/G,OAEhB,GAAI8B,YAAYC,OAAOgF,IAAWQ,EAAWR,EAAQjF,aACnD,OAAOiF,EAAOG,WAEhB,GAAsB,iBAAXH,EACT,MAAM,IAAIF,UACR,kGAC0BE,GAI9B,MAAM5I,EAAM4I,EAAO/G,OACb2I,EAAaC,UAAU5I,OAAS,IAAsB,IAAjB4I,UAAU,GACrD,IAAKD,GAAqB,IAARxK,EAAW,OAAO,EAGpC,IAAI0K,GAAc,EAClB,OACE,OAAQ7B,GACN,IAAK,QACL,IAAK,SACL,IAAK,SACH,OAAO7I,EACT,IAAK,OACL,IAAK,QACH,OAAO2K,EAAY/B,GAAQ/G,OAC7B,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,OAAa,EAAN7B,EACT,IAAK,MACH,OAAOA,IAAQ,EACjB,IAAK,SACH,OAAO4K,EAAchC,GAAQ/G,OAC/B,QACE,GAAI6I,EACF,OAAOF,GAAa,EAAIG,EAAY/B,GAAQ/G,OAE9CgH,GAAY,GAAKA,GAAUgC,cAC3BH,GAAc,GAMtB,SAASI,EAAcjC,EAAU3C,EAAOC,GACtC,IAAIuE,GAAc,EAclB,SALcX,IAAV7D,GAAuBA,EAAQ,KACjCA,EAAQ,GAINA,EAAQnF,KAAKc,OACf,MAAO,GAOT,SAJYkI,IAAR5D,GAAqBA,EAAMpF,KAAKc,UAClCsE,EAAMpF,KAAKc,QAGTsE,GAAO,EACT,MAAO,GAOT,IAHAA,KAAS,KACTD,KAAW,GAGT,MAAO,GAKT,IAFK2C,IAAUA,EAAW,UAGxB,OAAQA,GACN,IAAK,MACH,OAAOkC,EAAShK,KAAMmF,EAAOC,GAE/B,IAAK,OACL,IAAK,QACH,OAAO6E,EAAUjK,KAAMmF,EAAOC,GAEhC,IAAK,QACH,OAAO8E,EAAWlK,KAAMmF,EAAOC,GAEjC,IAAK,SACL,IAAK,SACH,OAAO+E,EAAYnK,KAAMmF,EAAOC,GAElC,IAAK,SACH,OAAOgF,EAAYpK,KAAMmF,EAAOC,GAElC,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,OAAOiF,EAAarK,KAAMmF,EAAOC,GAEnC,QACE,GAAIuE,EAAa,MAAM,IAAIhC,UAAU,qBAAuBG,GAC5DA,GAAYA,EAAW,IAAIgC,cAC3BH,GAAc,GAatB,SAASW,EAAMnL,EAAGoL,EAAG5E,GACnB,MAAMhG,EAAIR,EAAEoL,GACZpL,EAAEoL,GAAKpL,EAAEwG,GACTxG,EAAEwG,GAAKhG,EA4IT,SAAS6K,EAAsBlK,EAAQmK,EAAKjC,EAAYV,EAAU4C,GAEhE,GAAsB,IAAlBpK,EAAOQ,OAAc,OAAQ,EAmBjC,GAhB0B,iBAAf0H,GACTV,EAAWU,EACXA,EAAa,GACJA,EAAa,WACtBA,EAAa,WACJA,GAAc,aACvBA,GAAc,YAGZS,EADJT,GAAcA,KAGZA,EAAakC,EAAM,EAAKpK,EAAOQ,OAAS,GAItC0H,EAAa,IAAGA,EAAalI,EAAOQ,OAAS0H,GAC7CA,GAAclI,EAAOQ,OAAQ,CAC/B,GAAI4J,EAAK,OAAQ,EACZlC,EAAalI,EAAOQ,OAAS,OAC7B,GAAI0H,EAAa,EAAG,CACzB,IAAIkC,EACC,OAAQ,EADJlC,EAAa,EAUxB,GALmB,iBAARiC,IACTA,EAAM1D,EAAOlF,KAAK4I,EAAK3C,IAIrBf,EAAO+B,SAAS2B,GAElB,OAAmB,IAAfA,EAAI3J,QACE,EAEH6J,EAAarK,EAAQmK,EAAKjC,EAAYV,EAAU4C,GAClD,GAAmB,iBAARD,EAEhB,OADAA,GAAY,IACgC,mBAAjClK,WAAWK,UAAUsE,QAC1BwF,EACKnK,WAAWK,UAAUsE,QAAQ9B,KAAK9C,EAAQmK,EAAKjC,GAE/CjI,WAAWK,UAAUgK,YAAYxH,KAAK9C,EAAQmK,EAAKjC,GAGvDmC,EAAarK,EAAQ,CAACmK,GAAMjC,EAAYV,EAAU4C,GAG3D,MAAM,IAAI/C,UAAU,wCAGtB,SAASgD,EAAczG,EAAKuG,EAAKjC,EAAYV,EAAU4C,GACrD,IA0BI/K,EA1BAkL,EAAY,EACZC,EAAY5G,EAAIpD,OAChBiK,EAAYN,EAAI3J,OAEpB,QAAiBkI,IAAblB,IAEe,UADjBA,EAAWkD,OAAOlD,GAAUgC,gBACY,UAAbhC,GACV,YAAbA,GAAuC,aAAbA,GAAyB,CACrD,GAAI5D,EAAIpD,OAAS,GAAK2J,EAAI3J,OAAS,EACjC,OAAQ,EAEV+J,EAAY,EACZC,GAAa,EACbC,GAAa,EACbvC,GAAc,EAIlB,SAASyC,EAAM3D,EAAK3H,GAClB,OAAkB,IAAdkL,EACKvD,EAAI3H,GAEJ2H,EAAI4D,aAAavL,EAAIkL,GAKhC,GAAIH,EAAK,CACP,IAAIS,GAAc,EAClB,IAAKxL,EAAI6I,EAAY7I,EAAImL,EAAWnL,IAClC,GAAIsL,EAAK/G,EAAKvE,KAAOsL,EAAKR,GAAqB,IAAhBU,EAAoB,EAAIxL,EAAIwL,IAEzD,IADoB,IAAhBA,IAAmBA,EAAaxL,GAChCA,EAAIwL,EAAa,IAAMJ,EAAW,OAAOI,EAAaN,OAEtC,IAAhBM,IAAmBxL,GAAKA,EAAIwL,GAChCA,GAAc,OAKlB,IADI3C,EAAauC,EAAYD,IAAWtC,EAAasC,EAAYC,GAC5DpL,EAAI6I,EAAY7I,GAAK,EAAGA,IAAK,CAChC,IAAIyL,GAAQ,EACZ,IAAK,IAAIxL,EAAI,EAAGA,EAAImL,EAAWnL,IAC7B,GAAIqL,EAAK/G,EAAKvE,EAAIC,KAAOqL,EAAKR,EAAK7K,GAAI,CACrCwL,GAAQ,EACR,MAGJ,GAAIA,EAAO,OAAOzL,EAItB,OAAQ,EAeV,SAAS0L,EAAU/D,EAAKO,EAAQtC,EAAQzE,GACtCyE,EAAS+F,OAAO/F,IAAW,EAC3B,MAAMgG,EAAYjE,EAAIxG,OAASyE,EAC1BzE,GAGHA,EAASwK,OAAOxK,IACHyK,IACXzK,EAASyK,GAJXzK,EAASyK,EAQX,MAAMC,EAAS3D,EAAO/G,OAKtB,IAAInB,EACJ,IAJImB,EAAS0K,EAAS,IACpB1K,EAAS0K,EAAS,GAGf7L,EAAI,EAAGA,EAAImB,IAAUnB,EAAG,CAC3B,MAAM8L,EAASC,SAAS7D,EAAO8D,OAAW,EAAJhM,EAAO,GAAI,IACjD,GAAIsJ,EAAYwC,GAAS,OAAO9L,EAChC2H,EAAI/B,EAAS5F,GAAK8L,EAEpB,OAAO9L,EAGT,SAASiM,EAAWtE,EAAKO,EAAQtC,EAAQzE,GACvC,OAAO+K,EAAWjC,EAAY/B,EAAQP,EAAIxG,OAASyE,GAAS+B,EAAK/B,EAAQzE,GAG3E,SAASgL,EAAYxE,EAAKO,EAAQtC,EAAQzE,GACxC,OAAO+K,EAypCT,SAAuBE,GACrB,MAAMC,EAAY,GAClB,IAAK,IAAIrM,EAAI,EAAGA,EAAIoM,EAAIjL,SAAUnB,EAEhCqM,EAAUlH,KAAyB,IAApBiH,EAAIxH,WAAW5E,IAEhC,OAAOqM,EA/pCWC,CAAapE,GAASP,EAAK/B,EAAQzE,GAGvD,SAASoL,EAAa5E,EAAKO,EAAQtC,EAAQzE,GACzC,OAAO+K,EAAWhC,EAAchC,GAASP,EAAK/B,EAAQzE,GAGxD,SAASqL,EAAW7E,EAAKO,EAAQtC,EAAQzE,GACvC,OAAO+K,EA0pCT,SAAyBE,EAAKK,GAC5B,IAAIhN,EAAGiN,EAAIC,EACX,MAAMN,EAAY,GAClB,IAAK,IAAIrM,EAAI,EAAGA,EAAIoM,EAAIjL,WACjBsL,GAAS,GAAK,KADazM,EAGhCP,EAAI2M,EAAIxH,WAAW5E,GACnB0M,EAAKjN,GAAK,EACVkN,EAAKlN,EAAI,IACT4M,EAAUlH,KAAKwH,GACfN,EAAUlH,KAAKuH,GAGjB,OAAOL,EAvqCWO,CAAe1E,EAAQP,EAAIxG,OAASyE,GAAS+B,EAAK/B,EAAQzE,GA+E9E,SAASsJ,EAAa9C,EAAKnC,EAAOC,GAChC,OAAc,IAAVD,GAAeC,IAAQkC,EAAIxG,OACtB0L,EAAOC,cAAcnF,GAErBkF,EAAOC,cAAcnF,EAAI/D,MAAM4B,EAAOC,IAIjD,SAAS6E,EAAW3C,EAAKnC,EAAOC,GAC9BA,EAAMe,KAAKuG,IAAIpF,EAAIxG,OAAQsE,GAC3B,MAAMuH,EAAM,GAEZ,IAAIhN,EAAIwF,EACR,KAAOxF,EAAIyF,GAAK,CACd,MAAMwH,EAAYtF,EAAI3H,GACtB,IAAIkN,EAAY,KACZC,EAAoBF,EAAY,IAChC,EACCA,EAAY,IACT,EACCA,EAAY,IACT,EACA,EAEZ,GAAIjN,EAAImN,GAAoB1H,EAAK,CAC/B,IAAI2H,EAAYC,EAAWC,EAAYC,EAEvC,OAAQJ,GACN,KAAK,EACCF,EAAY,MACdC,EAAYD,GAEd,MACF,KAAK,EACHG,EAAazF,EAAI3H,EAAI,GACO,MAAV,IAAboN,KACHG,GAA6B,GAAZN,IAAqB,EAAoB,GAAbG,EACzCG,EAAgB,MAClBL,EAAYK,IAGhB,MACF,KAAK,EACHH,EAAazF,EAAI3H,EAAI,GACrBqN,EAAY1F,EAAI3H,EAAI,GACQ,MAAV,IAAboN,IAAsD,MAAV,IAAZC,KACnCE,GAA6B,GAAZN,IAAoB,IAAoB,GAAbG,IAAsB,EAAmB,GAAZC,EACrEE,EAAgB,OAAUA,EAAgB,OAAUA,EAAgB,SACtEL,EAAYK,IAGhB,MACF,KAAK,EACHH,EAAazF,EAAI3H,EAAI,GACrBqN,EAAY1F,EAAI3H,EAAI,GACpBsN,EAAa3F,EAAI3H,EAAI,GACO,MAAV,IAAboN,IAAsD,MAAV,IAAZC,IAAsD,MAAV,IAAbC,KAClEC,GAA6B,GAAZN,IAAoB,IAAqB,GAAbG,IAAsB,IAAmB,GAAZC,IAAqB,EAAoB,GAAbC,EAClGC,EAAgB,OAAUA,EAAgB,UAC5CL,EAAYK,KAMJ,OAAdL,GAGFA,EAAY,MACZC,EAAmB,GACVD,EAAY,QAErBA,GAAa,MACbF,EAAI7H,KAAK+H,IAAc,GAAK,KAAQ,OACpCA,EAAY,MAAqB,KAAZA,GAGvBF,EAAI7H,KAAK+H,GACTlN,GAAKmN,EAGP,OAQF,SAAgCK,GAC9B,MAAMlO,EAAMkO,EAAWrM,OACvB,GAAI7B,GAAOmO,EACT,OAAOpC,OAAOqC,aAAaC,MAAMtC,OAAQmC,GAI3C,IAAIR,EAAM,GACNhN,EAAI,EACR,KAAOA,EAAIV,GACT0N,GAAO3B,OAAOqC,aAAaC,MACzBtC,OACAmC,EAAW5J,MAAM5D,EAAGA,GAAKyN,IAG7B,OAAOT,EAvBAY,CAAsBZ,GA1+B/B7F,EAAA0G,WAAqBrG,EAgBrBJ,EAAO0G,oBAUP,WAEE,IACE,MAAMvJ,EAAM,IAAI3D,WAAW,GACrBmN,EAAQ,CAAEC,IAAK,WAAc,OAAO,KAG1C,OAFApG,OAAOC,eAAekG,EAAOnN,WAAWK,WACxC2G,OAAOC,eAAetD,EAAKwJ,GACN,KAAdxJ,EAAIyJ,MACX,MAAOrO,GACP,OAAO,GAnBkBsO,GAExB7G,EAAO0G,qBAA0C,oBAAZI,SACb,mBAAlBA,QAAQC,OACjBD,QAAQC,MACN,iJAkBJvG,OAAOwG,eAAehH,EAAOnG,UAAW,SAAU,CAChDoN,YAAY,EACZC,IAAK,WACH,GAAKlH,EAAO+B,SAAS9I,MACrB,OAAOA,KAAKM,UAIhBiH,OAAOwG,eAAehH,EAAOnG,UAAW,SAAU,CAChDoN,YAAY,EACZC,IAAK,WACH,GAAKlH,EAAO+B,SAAS9I,MACrB,OAAOA,KAAKwI,cAqChBzB,EAAOmH,SAAW,KA8DlBnH,EAAOlF,KAAO,SAAUwE,EAAOqB,EAAkB5G,GAC/C,OAAOe,EAAKwE,EAAOqB,EAAkB5G,IAKvCyG,OAAOC,eAAeT,EAAOnG,UAAWL,WAAWK,WACnD2G,OAAOC,eAAeT,EAAQxG,YA8B9BwG,EAAOE,MAAQ,SAAUsC,EAAM4E,EAAMrG,GACnC,OArBF,SAAgByB,EAAM4E,EAAMrG,GAE1B,OADAwB,EAAWC,GACPA,GAAQ,EACHnC,EAAamC,QAETP,IAATmF,EAIyB,iBAAbrG,EACVV,EAAamC,GAAM4E,KAAKA,EAAMrG,GAC9BV,EAAamC,GAAM4E,KAAKA,GAEvB/G,EAAamC,GAQbtC,CAAMsC,EAAM4E,EAAMrG,IAW3Bf,EAAOa,YAAc,SAAU2B,GAC7B,OAAO3B,EAAY2B,IAKrBxC,EAAOqH,gBAAkB,SAAU7E,GACjC,OAAO3B,EAAY2B,IA8GrBxC,EAAO+B,SAAW,SAAmB3J,GACnC,OAAY,MAALA,IAA6B,IAAhBA,EAAEkP,WACpBlP,IAAM4H,EAAOnG,WAGjBmG,EAAOuH,QAAU,SAAkBpP,EAAGC,GAGpC,GAFIkJ,EAAWnJ,EAAGqB,cAAarB,EAAI6H,EAAOlF,KAAK3C,EAAGA,EAAEqG,OAAQrG,EAAE8I,aAC1DK,EAAWlJ,EAAGoB,cAAapB,EAAI4H,EAAOlF,KAAK1C,EAAGA,EAAEoG,OAAQpG,EAAE6I,cACzDjB,EAAO+B,SAAS5J,KAAO6H,EAAO+B,SAAS3J,GAC1C,MAAM,IAAIwI,UACR,yEAIJ,GAAIzI,IAAMC,EAAG,OAAO,EAEpB,IAAIkE,EAAInE,EAAE4B,OACNyN,EAAIpP,EAAE2B,OAEV,IAAK,IAAInB,EAAI,EAAGV,EAAMkH,KAAKuG,IAAIrJ,EAAGkL,GAAI5O,EAAIV,IAAOU,EAC/C,GAAIT,EAAES,KAAOR,EAAEQ,GAAI,CACjB0D,EAAInE,EAAES,GACN4O,EAAIpP,EAAEQ,GACN,MAIJ,OAAI0D,EAAIkL,GAAW,EACfA,EAAIlL,EAAU,EACX,GAGT0D,EAAOgB,WAAa,SAAqBD,GACvC,OAAQkD,OAAOlD,GAAUgC,eACvB,IAAK,MACL,IAAK,OACL,IAAK,QACL,IAAK,QACL,IAAK,SACL,IAAK,SACL,IAAK,SACL,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,OAAO,EACT,QACE,OAAO,IAIb/C,EAAOyH,OAAS,SAAiBC,EAAM3N,GACrC,IAAKoC,MAAMiG,QAAQsF,GACjB,MAAM,IAAI9G,UAAU,+CAGtB,GAAoB,IAAhB8G,EAAK3N,OACP,OAAOiG,EAAOE,MAAM,GAGtB,IAAItH,EACJ,QAAeqJ,IAAXlI,EAEF,IADAA,EAAS,EACJnB,EAAI,EAAGA,EAAI8O,EAAK3N,SAAUnB,EAC7BmB,GAAU2N,EAAK9O,GAAGmB,OAItB,MAAMR,EAASyG,EAAOa,YAAY9G,GAClC,IAAI9B,EAAM,EACV,IAAKW,EAAI,EAAGA,EAAI8O,EAAK3N,SAAUnB,EAAG,CAChC,IAAI2H,EAAMmH,EAAK9O,GACf,GAAI0I,EAAWf,EAAK/G,YACdvB,EAAMsI,EAAIxG,OAASR,EAAOQ,QACvBiG,EAAO+B,SAASxB,KAAMA,EAAMP,EAAOlF,KAAKyF,IAC7CA,EAAIgB,KAAKhI,EAAQtB,IAEjBuB,WAAWK,UAAU8N,IAAItL,KACvB9C,EACAgH,EACAtI,OAGC,CAAA,IAAK+H,EAAO+B,SAASxB,GAC1B,MAAM,IAAIK,UAAU,+CAEpBL,EAAIgB,KAAKhI,EAAQtB,GAEnBA,GAAOsI,EAAIxG,OAEb,OAAOR,GAkDTyG,EAAOiB,WAAaA,EA8EpBjB,EAAOnG,UAAUyN,WAAY,EAQ7BtH,EAAOnG,UAAU+N,OAAS,WACxB,MAAM1P,EAAMe,KAAKc,OACjB,GAAI7B,EAAM,GAAM,EACd,MAAM,IAAIoI,WAAW,6CAEvB,IAAK,IAAI1H,EAAI,EAAGA,EAAIV,EAAKU,GAAK,EAC5B2K,EAAKtK,KAAML,EAAGA,EAAI,GAEpB,OAAOK,MAGT+G,EAAOnG,UAAUgO,OAAS,WACxB,MAAM3P,EAAMe,KAAKc,OACjB,GAAI7B,EAAM,GAAM,EACd,MAAM,IAAIoI,WAAW,6CAEvB,IAAK,IAAI1H,EAAI,EAAGA,EAAIV,EAAKU,GAAK,EAC5B2K,EAAKtK,KAAML,EAAGA,EAAI,GAClB2K,EAAKtK,KAAML,EAAI,EAAGA,EAAI,GAExB,OAAOK,MAGT+G,EAAOnG,UAAUiO,OAAS,WACxB,MAAM5P,EAAMe,KAAKc,OACjB,GAAI7B,EAAM,GAAM,EACd,MAAM,IAAIoI,WAAW,6CAEvB,IAAK,IAAI1H,EAAI,EAAGA,EAAIV,EAAKU,GAAK,EAC5B2K,EAAKtK,KAAML,EAAGA,EAAI,GAClB2K,EAAKtK,KAAML,EAAI,EAAGA,EAAI,GACtB2K,EAAKtK,KAAML,EAAI,EAAGA,EAAI,GACtB2K,EAAKtK,KAAML,EAAI,EAAGA,EAAI,GAExB,OAAOK,MAGT+G,EAAOnG,UAAU0C,SAAW,WAC1B,MAAMxC,EAASd,KAAKc,OACpB,OAAe,IAAXA,EAAqB,GACA,IAArB4I,UAAU5I,OAAqBmJ,EAAUjK,KAAM,EAAGc,GAC/CiJ,EAAauD,MAAMtN,KAAM0J,YAGlC3C,EAAOnG,UAAUkO,eAAiB/H,EAAOnG,UAAU0C,SAEnDyD,EAAOnG,UAAUmO,OAAS,SAAiB5P,GACzC,IAAK4H,EAAO+B,SAAS3J,GAAI,MAAM,IAAIwI,UAAU,6BAC7C,OAAI3H,OAASb,GACsB,IAA5B4H,EAAOuH,QAAQtO,KAAMb,IAG9B4H,EAAOnG,UAAUoO,QAAU,WACzB,IAAIjD,EAAM,GACV,MAAMkD,EAAMnI,EAAQI,kBAGpB,OAFA6E,EAAM/L,KAAKsD,SAAS,MAAO,EAAG2L,GAAKC,QAAQ,UAAW,OAAOC,OACzDnP,KAAKc,OAASmO,IAAKlD,GAAO,SACvB,WAAaA,EAAM,KAExBnF,IACFG,EAAOnG,UAAUgG,GAAuBG,EAAOnG,UAAUoO,SAG3DjI,EAAOnG,UAAU0N,QAAU,SAAkBc,EAAQjK,EAAOC,EAAKiK,EAAWC,GAI1E,GAHIjH,EAAW+G,EAAQ7O,cACrB6O,EAASrI,EAAOlF,KAAKuN,EAAQA,EAAO7J,OAAQ6J,EAAOpH,cAEhDjB,EAAO+B,SAASsG,GACnB,MAAM,IAAIzH,UACR,wFAC2ByH,GAiB/B,QAbcpG,IAAV7D,IACFA,EAAQ,QAEE6D,IAAR5D,IACFA,EAAMgK,EAASA,EAAOtO,OAAS,QAEfkI,IAAdqG,IACFA,EAAY,QAEErG,IAAZsG,IACFA,EAAUtP,KAAKc,QAGbqE,EAAQ,GAAKC,EAAMgK,EAAOtO,QAAUuO,EAAY,GAAKC,EAAUtP,KAAKc,OACtE,MAAM,IAAIuG,WAAW,sBAGvB,GAAIgI,GAAaC,GAAWnK,GAASC,EACnC,OAAO,EAET,GAAIiK,GAAaC,EACf,OAAQ,EAEV,GAAInK,GAASC,EACX,OAAO,EAQT,GAAIpF,OAASoP,EAAQ,OAAO,EAE5B,IAAI/L,GAJJiM,KAAa,IADbD,KAAe,GAMXd,GAPJnJ,KAAS,IADTD,KAAW,GASX,MAAMlG,EAAMkH,KAAKuG,IAAIrJ,EAAGkL,GAElBgB,EAAWvP,KAAKuD,MAAM8L,EAAWC,GACjCE,EAAaJ,EAAO7L,MAAM4B,EAAOC,GAEvC,IAAK,IAAIzF,EAAI,EAAGA,EAAIV,IAAOU,EACzB,GAAI4P,EAAS5P,KAAO6P,EAAW7P,GAAI,CACjC0D,EAAIkM,EAAS5P,GACb4O,EAAIiB,EAAW7P,GACf,MAIJ,OAAI0D,EAAIkL,GAAW,EACfA,EAAIlL,EAAU,EACX,GA4HT0D,EAAOnG,UAAU6O,SAAW,SAAmBhF,EAAKjC,EAAYV,GAC9D,OAAoD,IAA7C9H,KAAKkF,QAAQuF,EAAKjC,EAAYV,IAGvCf,EAAOnG,UAAUsE,QAAU,SAAkBuF,EAAKjC,EAAYV,GAC5D,OAAO0C,EAAqBxK,KAAMyK,EAAKjC,EAAYV,GAAU,IAG/Df,EAAOnG,UAAUgK,YAAc,SAAsBH,EAAKjC,EAAYV,GACpE,OAAO0C,EAAqBxK,KAAMyK,EAAKjC,EAAYV,GAAU,IA6C/Df,EAAOnG,UAAUsH,MAAQ,SAAgBL,EAAQtC,EAAQzE,EAAQgH,GAE/D,QAAekB,IAAXzD,EACFuC,EAAW,OACXhH,EAASd,KAAKc,OACdyE,EAAS,OAEJ,QAAeyD,IAAXlI,GAA0C,iBAAXyE,EACxCuC,EAAWvC,EACXzE,EAASd,KAAKc,OACdyE,EAAS,MAEJ,CAAA,IAAImK,SAASnK,GAUlB,MAAM,IAAIrE,MACR,2EAVFqE,KAAoB,EAChBmK,SAAS5O,IACXA,KAAoB,OACHkI,IAAblB,IAAwBA,EAAW,UAEvCA,EAAWhH,EACXA,OAASkI,GAQb,MAAMuC,EAAYvL,KAAKc,OAASyE,EAGhC,SAFeyD,IAAXlI,GAAwBA,EAASyK,KAAWzK,EAASyK,GAEpD1D,EAAO/G,OAAS,IAAMA,EAAS,GAAKyE,EAAS,IAAOA,EAASvF,KAAKc,OACrE,MAAM,IAAIuG,WAAW,0CAGlBS,IAAUA,EAAW,QAE1B,IAAI6B,GAAc,EAClB,OACE,OAAQ7B,GACN,IAAK,MACH,OAAOuD,EAASrL,KAAM6H,EAAQtC,EAAQzE,GAExC,IAAK,OACL,IAAK,QACH,OAAO8K,EAAU5L,KAAM6H,EAAQtC,EAAQzE,GAEzC,IAAK,QACL,IAAK,SACL,IAAK,SACH,OAAOgL,EAAW9L,KAAM6H,EAAQtC,EAAQzE,GAE1C,IAAK,SAEH,OAAOoL,EAAYlM,KAAM6H,EAAQtC,EAAQzE,GAE3C,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,OAAOqL,EAAUnM,KAAM6H,EAAQtC,EAAQzE,GAEzC,QACE,GAAI6I,EAAa,MAAM,IAAIhC,UAAU,qBAAuBG,GAC5DA,GAAY,GAAKA,GAAUgC,cAC3BH,GAAc,IAKtB5C,EAAOnG,UAAU+O,OAAS,WACxB,MAAO,CACLzG,KAAM,SACNlI,KAAMkC,MAAMtC,UAAU2C,MAAMH,KAAKpD,KAAK4P,MAAQ5P,KAAM,KA2FxD,MAAMoN,EAAuB,KAoB7B,SAASlD,EAAY5C,EAAKnC,EAAOC,GAC/B,IAAIyK,EAAM,GACVzK,EAAMe,KAAKuG,IAAIpF,EAAIxG,OAAQsE,GAE3B,IAAK,IAAIzF,EAAIwF,EAAOxF,EAAIyF,IAAOzF,EAC7BkQ,GAAO7E,OAAOqC,aAAsB,IAAT/F,EAAI3H,IAEjC,OAAOkQ,EAGT,SAAS1F,EAAa7C,EAAKnC,EAAOC,GAChC,IAAIyK,EAAM,GACVzK,EAAMe,KAAKuG,IAAIpF,EAAIxG,OAAQsE,GAE3B,IAAK,IAAIzF,EAAIwF,EAAOxF,EAAIyF,IAAOzF,EAC7BkQ,GAAO7E,OAAOqC,aAAa/F,EAAI3H,IAEjC,OAAOkQ,EAGT,SAAS7F,EAAU1C,EAAKnC,EAAOC,GAC7B,MAAMnG,EAAMqI,EAAIxG,SAEXqE,GAASA,EAAQ,KAAGA,EAAQ,KAC5BC,GAAOA,EAAM,GAAKA,EAAMnG,KAAKmG,EAAMnG,GAExC,IAAIoC,EAAM,GACV,IAAK,IAAI1B,EAAIwF,EAAOxF,EAAIyF,IAAOzF,EAC7B0B,GAAOyO,EAAoBxI,EAAI3H,IAEjC,OAAO0B,EAGT,SAASgJ,EAAc/C,EAAKnC,EAAOC,GACjC,MAAM2K,EAAQzI,EAAI/D,MAAM4B,EAAOC,GAC/B,IAAIuH,EAAM,GAEV,IAAK,IAAIhN,EAAI,EAAGA,EAAIoQ,EAAMjP,OAAS,EAAGnB,GAAK,EACzCgN,GAAO3B,OAAOqC,aAAa0C,EAAMpQ,GAAqB,IAAfoQ,EAAMpQ,EAAI,IAEnD,OAAOgN,EAkCT,SAASqD,EAAazK,EAAQ0K,EAAKnP,GACjC,GAAKyE,EAAS,GAAO,GAAKA,EAAS,EAAG,MAAM,IAAI8B,WAAW,sBAC3D,GAAI9B,EAAS0K,EAAMnP,EAAQ,MAAM,IAAIuG,WAAW,yCA0QlD,SAAS6I,EAAU5I,EAAKjB,EAAOd,EAAQ0K,EAAKhB,EAAKvC,GAC/C,IAAK3F,EAAO+B,SAASxB,GAAM,MAAM,IAAIK,UAAU,+CAC/C,GAAItB,EAAQ4I,GAAO5I,EAAQqG,EAAK,MAAM,IAAIrF,WAAW,qCACrD,GAAI9B,EAAS0K,EAAM3I,EAAIxG,OAAQ,MAAM,IAAIuG,WAAW,sBAgGtD,SAAS8I,EAAgB7I,EAAKjB,EAAOd,EAAQmH,EAAKuC,GAChDmB,EAAW/J,EAAOqG,EAAKuC,EAAK3H,EAAK/B,EAAQ,GAEzC,IAAI+G,EAAKhB,OAAOjF,EAAQgK,OAAO,aAC/B/I,EAAI/B,KAAY+G,EAChBA,IAAW,EACXhF,EAAI/B,KAAY+G,EAChBA,IAAW,EACXhF,EAAI/B,KAAY+G,EAChBA,IAAW,EACXhF,EAAI/B,KAAY+G,EAChB,IAAID,EAAKf,OAAOjF,GAASgK,OAAO,IAAMA,OAAO,aAQ7C,OAPA/I,EAAI/B,KAAY8G,EAChBA,IAAW,EACX/E,EAAI/B,KAAY8G,EAChBA,IAAW,EACX/E,EAAI/B,KAAY8G,EAChBA,IAAW,EACX/E,EAAI/B,KAAY8G,EACT9G,EAGT,SAAS+K,EAAgBhJ,EAAKjB,EAAOd,EAAQmH,EAAKuC,GAChDmB,EAAW/J,EAAOqG,EAAKuC,EAAK3H,EAAK/B,EAAQ,GAEzC,IAAI+G,EAAKhB,OAAOjF,EAAQgK,OAAO,aAC/B/I,EAAI/B,EAAS,GAAK+G,EAClBA,IAAW,EACXhF,EAAI/B,EAAS,GAAK+G,EAClBA,IAAW,EACXhF,EAAI/B,EAAS,GAAK+G,EAClBA,IAAW,EACXhF,EAAI/B,EAAS,GAAK+G,EAClB,IAAID,EAAKf,OAAOjF,GAASgK,OAAO,IAAMA,OAAO,aAQ7C,OAPA/I,EAAI/B,EAAS,GAAK8G,EAClBA,IAAW,EACX/E,EAAI/B,EAAS,GAAK8G,EAClBA,IAAW,EACX/E,EAAI/B,EAAS,GAAK8G,EAClBA,IAAW,EACX/E,EAAI/B,GAAU8G,EACP9G,EAAS,EAmHlB,SAASgL,EAAcjJ,EAAKjB,EAAOd,EAAQ0K,EAAKhB,EAAKvC,GACnD,GAAInH,EAAS0K,EAAM3I,EAAIxG,OAAQ,MAAM,IAAIuG,WAAW,sBACpD,GAAI9B,EAAS,EAAG,MAAM,IAAI8B,WAAW,sBAGvC,SAASmJ,EAAYlJ,EAAKjB,EAAOd,EAAQkL,EAAcC,GAOrD,OANArK,GAASA,EACTd,KAAoB,EACfmL,GACHH,EAAajJ,EAAKjB,EAAOd,EAAQ,GAEnCoL,EAAcrJ,EAAKjB,EAAOd,EAAQkL,EAAc,GAAI,GAC7ClL,EAAS,EAWlB,SAASqL,EAAatJ,EAAKjB,EAAOd,EAAQkL,EAAcC,GAOtD,OANArK,GAASA,EACTd,KAAoB,EACfmL,GACHH,EAAajJ,EAAKjB,EAAOd,EAAQ,GAEnCoL,EAAcrJ,EAAKjB,EAAOd,EAAQkL,EAAc,GAAI,GAC7ClL,EAAS,EAxkBlBwB,EAAOnG,UAAU2C,MAAQ,SAAgB4B,EAAOC,GAC9C,MAAMnG,EAAMe,KAAKc,QACjBqE,IAAUA,GAGE,GACVA,GAASlG,GACG,IAAGkG,EAAQ,GACdA,EAAQlG,IACjBkG,EAAQlG,IANVmG,OAAc4D,IAAR5D,EAAoBnG,IAAQmG,GASxB,GACRA,GAAOnG,GACG,IAAGmG,EAAM,GACVA,EAAMnG,IACfmG,EAAMnG,GAGJmG,EAAMD,IAAOC,EAAMD,GAEvB,MAAM0L,EAAS7Q,KAAK8Q,SAAS3L,EAAOC,GAIpC,OAFAmC,OAAOC,eAAeqJ,EAAQ9J,EAAOnG,WAE9BiQ,GAWT9J,EAAOnG,UAAUmQ,WACjBhK,EAAOnG,UAAUoQ,WAAa,SAAqBzL,EAAQyC,EAAY0I,GACrEnL,KAAoB,EACpByC,KAA4B,EACvB0I,GAAUV,EAAYzK,EAAQyC,EAAYhI,KAAKc,QAEpD,IAAI2J,EAAMzK,KAAKuF,GACX0L,EAAM,EACNtR,EAAI,EACR,OAASA,EAAIqI,IAAeiJ,GAAO,MACjCxG,GAAOzK,KAAKuF,EAAS5F,GAAKsR,EAG5B,OAAOxG,GAGT1D,EAAOnG,UAAUsQ,WACjBnK,EAAOnG,UAAUuQ,WAAa,SAAqB5L,EAAQyC,EAAY0I,GACrEnL,KAAoB,EACpByC,KAA4B,EACvB0I,GACHV,EAAYzK,EAAQyC,EAAYhI,KAAKc,QAGvC,IAAI2J,EAAMzK,KAAKuF,IAAWyC,GACtBiJ,EAAM,EACV,KAAOjJ,EAAa,IAAMiJ,GAAO,MAC/BxG,GAAOzK,KAAKuF,IAAWyC,GAAciJ,EAGvC,OAAOxG,GAGT1D,EAAOnG,UAAUwQ,UACjBrK,EAAOnG,UAAUyQ,UAAY,SAAoB9L,EAAQmL,GAGvD,OAFAnL,KAAoB,EACfmL,GAAUV,EAAYzK,EAAQ,EAAGvF,KAAKc,QACpCd,KAAKuF,IAGdwB,EAAOnG,UAAU0Q,aACjBvK,EAAOnG,UAAU2Q,aAAe,SAAuBhM,EAAQmL,GAG7D,OAFAnL,KAAoB,EACfmL,GAAUV,EAAYzK,EAAQ,EAAGvF,KAAKc,QACpCd,KAAKuF,GAAWvF,KAAKuF,EAAS,IAAM,GAG7CwB,EAAOnG,UAAU4Q,aACjBzK,EAAOnG,UAAUsK,aAAe,SAAuB3F,EAAQmL,GAG7D,OAFAnL,KAAoB,EACfmL,GAAUV,EAAYzK,EAAQ,EAAGvF,KAAKc,QACnCd,KAAKuF,IAAW,EAAKvF,KAAKuF,EAAS,IAG7CwB,EAAOnG,UAAU6Q,aACjB1K,EAAOnG,UAAU8Q,aAAe,SAAuBnM,EAAQmL,GAI7D,OAHAnL,KAAoB,EACfmL,GAAUV,EAAYzK,EAAQ,EAAGvF,KAAKc,SAElCd,KAAKuF,GACTvF,KAAKuF,EAAS,IAAM,EACpBvF,KAAKuF,EAAS,IAAM,IACD,SAAnBvF,KAAKuF,EAAS,IAGrBwB,EAAOnG,UAAU+Q,aACjB5K,EAAOnG,UAAUgR,aAAe,SAAuBrM,EAAQmL,GAI7D,OAHAnL,KAAoB,EACfmL,GAAUV,EAAYzK,EAAQ,EAAGvF,KAAKc,QAEpB,SAAfd,KAAKuF,IACTvF,KAAKuF,EAAS,IAAM,GACrBvF,KAAKuF,EAAS,IAAM,EACrBvF,KAAKuF,EAAS,KAGlBwB,EAAOnG,UAAUiR,gBAAkBC,GAAmB,SAA0BvM,GAE9EwM,EADAxM,KAAoB,EACG,UACvB,MAAMyM,EAAQhS,KAAKuF,GACb0M,EAAOjS,KAAKuF,EAAS,QACbyD,IAAVgJ,QAAgChJ,IAATiJ,GACzBC,EAAY3M,EAAQvF,KAAKc,OAAS,GAGpC,MAAMwL,EAAK0F,EACQ,IAAjBhS,OAAOuF,GACU,MAAjBvF,OAAOuF,GACPvF,OAAOuF,GAAU,GAAK,GAElB8G,EAAKrM,OAAOuF,GACC,IAAjBvF,OAAOuF,GACU,MAAjBvF,OAAOuF,GACP0M,EAAO,GAAK,GAEd,OAAO5B,OAAO/D,IAAO+D,OAAOhE,IAAOgE,OAAO,QAG5CtJ,EAAOnG,UAAUuR,gBAAkBL,GAAmB,SAA0BvM,GAE9EwM,EADAxM,KAAoB,EACG,UACvB,MAAMyM,EAAQhS,KAAKuF,GACb0M,EAAOjS,KAAKuF,EAAS,QACbyD,IAAVgJ,QAAgChJ,IAATiJ,GACzBC,EAAY3M,EAAQvF,KAAKc,OAAS,GAGpC,MAAMuL,EAAK2F,EAAQ,GAAK,GACL,MAAjBhS,OAAOuF,GACU,IAAjBvF,OAAOuF,GACPvF,OAAOuF,GAEH+G,EAAKtM,OAAOuF,GAAU,GAAK,GACd,MAAjBvF,OAAOuF,GACU,IAAjBvF,OAAOuF,GACP0M,EAEF,OAAQ5B,OAAOhE,IAAOgE,OAAO,KAAOA,OAAO/D,MAG7CvF,EAAOnG,UAAUwR,UAAY,SAAoB7M,EAAQyC,EAAY0I,GACnEnL,KAAoB,EACpByC,KAA4B,EACvB0I,GAAUV,EAAYzK,EAAQyC,EAAYhI,KAAKc,QAEpD,IAAI2J,EAAMzK,KAAKuF,GACX0L,EAAM,EACNtR,EAAI,EACR,OAASA,EAAIqI,IAAeiJ,GAAO,MACjCxG,GAAOzK,KAAKuF,EAAS5F,GAAKsR,EAM5B,OAJAA,GAAO,IAEHxG,GAAOwG,IAAKxG,GAAOtE,KAAKC,IAAI,EAAG,EAAI4B,IAEhCyC,GAGT1D,EAAOnG,UAAUyR,UAAY,SAAoB9M,EAAQyC,EAAY0I,GACnEnL,KAAoB,EACpByC,KAA4B,EACvB0I,GAAUV,EAAYzK,EAAQyC,EAAYhI,KAAKc,QAEpD,IAAInB,EAAIqI,EACJiJ,EAAM,EACNxG,EAAMzK,KAAKuF,IAAW5F,GAC1B,KAAOA,EAAI,IAAMsR,GAAO,MACtBxG,GAAOzK,KAAKuF,IAAW5F,GAAKsR,EAM9B,OAJAA,GAAO,IAEHxG,GAAOwG,IAAKxG,GAAOtE,KAAKC,IAAI,EAAG,EAAI4B,IAEhCyC,GAGT1D,EAAOnG,UAAU0R,SAAW,SAAmB/M,EAAQmL,GAGrD,OAFAnL,KAAoB,EACfmL,GAAUV,EAAYzK,EAAQ,EAAGvF,KAAKc,QACtB,IAAfd,KAAKuF,IAC0B,GAA5B,IAAOvF,KAAKuF,GAAU,GADKvF,KAAKuF,IAI3CwB,EAAOnG,UAAU2R,YAAc,SAAsBhN,EAAQmL,GAC3DnL,KAAoB,EACfmL,GAAUV,EAAYzK,EAAQ,EAAGvF,KAAKc,QAC3C,MAAM2J,EAAMzK,KAAKuF,GAAWvF,KAAKuF,EAAS,IAAM,EAChD,OAAc,MAANkF,EAAsB,WAANA,EAAmBA,GAG7C1D,EAAOnG,UAAU4R,YAAc,SAAsBjN,EAAQmL,GAC3DnL,KAAoB,EACfmL,GAAUV,EAAYzK,EAAQ,EAAGvF,KAAKc,QAC3C,MAAM2J,EAAMzK,KAAKuF,EAAS,GAAMvF,KAAKuF,IAAW,EAChD,OAAc,MAANkF,EAAsB,WAANA,EAAmBA,GAG7C1D,EAAOnG,UAAU6R,YAAc,SAAsBlN,EAAQmL,GAI3D,OAHAnL,KAAoB,EACfmL,GAAUV,EAAYzK,EAAQ,EAAGvF,KAAKc,QAEnCd,KAAKuF,GACVvF,KAAKuF,EAAS,IAAM,EACpBvF,KAAKuF,EAAS,IAAM,GACpBvF,KAAKuF,EAAS,IAAM,IAGzBwB,EAAOnG,UAAU8R,YAAc,SAAsBnN,EAAQmL,GAI3D,OAHAnL,KAAoB,EACfmL,GAAUV,EAAYzK,EAAQ,EAAGvF,KAAKc,QAEnCd,KAAKuF,IAAW,GACrBvF,KAAKuF,EAAS,IAAM,GACpBvF,KAAKuF,EAAS,IAAM,EACpBvF,KAAKuF,EAAS,IAGnBwB,EAAOnG,UAAU+R,eAAiBb,GAAmB,SAAyBvM,GAE5EwM,EADAxM,KAAoB,EACG,UACvB,MAAMyM,EAAQhS,KAAKuF,GACb0M,EAAOjS,KAAKuF,EAAS,QACbyD,IAAVgJ,QAAgChJ,IAATiJ,GACzBC,EAAY3M,EAAQvF,KAAKc,OAAS,GAGpC,MAAM2J,EAAMzK,KAAKuF,EAAS,GACL,IAAnBvF,KAAKuF,EAAS,GACK,MAAnBvF,KAAKuF,EAAS,IACb0M,GAAQ,IAEX,OAAQ5B,OAAO5F,IAAQ4F,OAAO,KAC5BA,OAAO2B,EACU,IAAjBhS,OAAOuF,GACU,MAAjBvF,OAAOuF,GACPvF,OAAOuF,GAAU,GAAK,OAG1BwB,EAAOnG,UAAUgS,eAAiBd,GAAmB,SAAyBvM,GAE5EwM,EADAxM,KAAoB,EACG,UACvB,MAAMyM,EAAQhS,KAAKuF,GACb0M,EAAOjS,KAAKuF,EAAS,QACbyD,IAAVgJ,QAAgChJ,IAATiJ,GACzBC,EAAY3M,EAAQvF,KAAKc,OAAS,GAGpC,MAAM2J,GAAOuH,GAAS,IACH,MAAjBhS,OAAOuF,GACU,IAAjBvF,OAAOuF,GACPvF,OAAOuF,GAET,OAAQ8K,OAAO5F,IAAQ4F,OAAO,KAC5BA,OAAOrQ,OAAOuF,GAAU,GAAK,GACZ,MAAjBvF,OAAOuF,GACU,IAAjBvF,OAAOuF,GACP0M,MAGJlL,EAAOnG,UAAUiS,YAAc,SAAsBtN,EAAQmL,GAG3D,OAFAnL,KAAoB,EACfmL,GAAUV,EAAYzK,EAAQ,EAAGvF,KAAKc,QACpC6P,EAAa3Q,KAAMuF,GAAQ,EAAM,GAAI,IAG9CwB,EAAOnG,UAAUkS,YAAc,SAAsBvN,EAAQmL,GAG3D,OAFAnL,KAAoB,EACfmL,GAAUV,EAAYzK,EAAQ,EAAGvF,KAAKc,QACpC6P,EAAa3Q,KAAMuF,GAAQ,EAAO,GAAI,IAG/CwB,EAAOnG,UAAUmS,aAAe,SAAuBxN,EAAQmL,GAG7D,OAFAnL,KAAoB,EACfmL,GAAUV,EAAYzK,EAAQ,EAAGvF,KAAKc,QACpC6P,EAAa3Q,KAAMuF,GAAQ,EAAM,GAAI,IAG9CwB,EAAOnG,UAAUoS,aAAe,SAAuBzN,EAAQmL,GAG7D,OAFAnL,KAAoB,EACfmL,GAAUV,EAAYzK,EAAQ,EAAGvF,KAAKc,QACpC6P,EAAa3Q,KAAMuF,GAAQ,EAAO,GAAI,IAS/CwB,EAAOnG,UAAUqS,YACjBlM,EAAOnG,UAAUsS,YAAc,SAAsB7M,EAAOd,EAAQyC,EAAY0I,GAC9ErK,GAASA,EACTd,KAAoB,EACpByC,KAA4B,EACvB0I,GAEHR,EAASlQ,KAAMqG,EAAOd,EAAQyC,EADb7B,KAAKC,IAAI,EAAG,EAAI4B,GAAc,EACK,GAGtD,IAAIiJ,EAAM,EACNtR,EAAI,EAER,IADAK,KAAKuF,GAAkB,IAARc,IACN1G,EAAIqI,IAAeiJ,GAAO,MACjCjR,KAAKuF,EAAS5F,GAAM0G,EAAQ4K,EAAO,IAGrC,OAAO1L,EAASyC,GAGlBjB,EAAOnG,UAAUuS,YACjBpM,EAAOnG,UAAUwS,YAAc,SAAsB/M,EAAOd,EAAQyC,EAAY0I,GAC9ErK,GAASA,EACTd,KAAoB,EACpByC,KAA4B,EACvB0I,GAEHR,EAASlQ,KAAMqG,EAAOd,EAAQyC,EADb7B,KAAKC,IAAI,EAAG,EAAI4B,GAAc,EACK,GAGtD,IAAIrI,EAAIqI,EAAa,EACjBiJ,EAAM,EAEV,IADAjR,KAAKuF,EAAS5F,GAAa,IAAR0G,IACV1G,GAAK,IAAMsR,GAAO,MACzBjR,KAAKuF,EAAS5F,GAAM0G,EAAQ4K,EAAO,IAGrC,OAAO1L,EAASyC,GAGlBjB,EAAOnG,UAAUyS,WACjBtM,EAAOnG,UAAU0S,WAAa,SAAqBjN,EAAOd,EAAQmL,GAKhE,OAJArK,GAASA,EACTd,KAAoB,EACfmL,GAAUR,EAASlQ,KAAMqG,EAAOd,EAAQ,EAAG,IAAM,GACtDvF,KAAKuF,GAAmB,IAARc,EACTd,EAAS,GAGlBwB,EAAOnG,UAAU2S,cACjBxM,EAAOnG,UAAU4S,cAAgB,SAAwBnN,EAAOd,EAAQmL,GAMtE,OALArK,GAASA,EACTd,KAAoB,EACfmL,GAAUR,EAASlQ,KAAMqG,EAAOd,EAAQ,EAAG,MAAQ,GACxDvF,KAAKuF,GAAmB,IAARc,EAChBrG,KAAKuF,EAAS,GAAMc,IAAU,EACvBd,EAAS,GAGlBwB,EAAOnG,UAAU6S,cACjB1M,EAAOnG,UAAU8S,cAAgB,SAAwBrN,EAAOd,EAAQmL,GAMtE,OALArK,GAASA,EACTd,KAAoB,EACfmL,GAAUR,EAASlQ,KAAMqG,EAAOd,EAAQ,EAAG,MAAQ,GACxDvF,KAAKuF,GAAWc,IAAU,EAC1BrG,KAAKuF,EAAS,GAAc,IAARc,EACbd,EAAS,GAGlBwB,EAAOnG,UAAU+S,cACjB5M,EAAOnG,UAAUgT,cAAgB,SAAwBvN,EAAOd,EAAQmL,GAQtE,OAPArK,GAASA,EACTd,KAAoB,EACfmL,GAAUR,EAASlQ,KAAMqG,EAAOd,EAAQ,EAAG,WAAY,GAC5DvF,KAAKuF,EAAS,GAAMc,IAAU,GAC9BrG,KAAKuF,EAAS,GAAMc,IAAU,GAC9BrG,KAAKuF,EAAS,GAAMc,IAAU,EAC9BrG,KAAKuF,GAAmB,IAARc,EACTd,EAAS,GAGlBwB,EAAOnG,UAAUiT,cACjB9M,EAAOnG,UAAUkT,cAAgB,SAAwBzN,EAAOd,EAAQmL,GAQtE,OAPArK,GAASA,EACTd,KAAoB,EACfmL,GAAUR,EAASlQ,KAAMqG,EAAOd,EAAQ,EAAG,WAAY,GAC5DvF,KAAKuF,GAAWc,IAAU,GAC1BrG,KAAKuF,EAAS,GAAMc,IAAU,GAC9BrG,KAAKuF,EAAS,GAAMc,IAAU,EAC9BrG,KAAKuF,EAAS,GAAc,IAARc,EACbd,EAAS,GA+ClBwB,EAAOnG,UAAUmT,iBAAmBjC,GAAmB,SAA2BzL,EAAOd,EAAS,GAChG,OAAO4K,EAAenQ,KAAMqG,EAAOd,EAAQ8K,OAAO,GAAIA,OAAO,0BAG/DtJ,EAAOnG,UAAUoT,iBAAmBlC,GAAmB,SAA2BzL,EAAOd,EAAS,GAChG,OAAO+K,EAAetQ,KAAMqG,EAAOd,EAAQ8K,OAAO,GAAIA,OAAO,0BAG/DtJ,EAAOnG,UAAUqT,WAAa,SAAqB5N,EAAOd,EAAQyC,EAAY0I,GAG5E,GAFArK,GAASA,EACTd,KAAoB,GACfmL,EAAU,CACb,MAAMwD,EAAQ/N,KAAKC,IAAI,EAAI,EAAI4B,EAAc,GAE7CkI,EAASlQ,KAAMqG,EAAOd,EAAQyC,EAAYkM,EAAQ,GAAIA,GAGxD,IAAIvU,EAAI,EACJsR,EAAM,EACNkD,EAAM,EAEV,IADAnU,KAAKuF,GAAkB,IAARc,IACN1G,EAAIqI,IAAeiJ,GAAO,MAC7B5K,EAAQ,GAAa,IAAR8N,GAAsC,IAAzBnU,KAAKuF,EAAS5F,EAAI,KAC9CwU,EAAM,GAERnU,KAAKuF,EAAS5F,IAAO0G,EAAQ4K,GAAQ,GAAKkD,EAAM,IAGlD,OAAO5O,EAASyC,GAGlBjB,EAAOnG,UAAUwT,WAAa,SAAqB/N,EAAOd,EAAQyC,EAAY0I,GAG5E,GAFArK,GAASA,EACTd,KAAoB,GACfmL,EAAU,CACb,MAAMwD,EAAQ/N,KAAKC,IAAI,EAAI,EAAI4B,EAAc,GAE7CkI,EAASlQ,KAAMqG,EAAOd,EAAQyC,EAAYkM,EAAQ,GAAIA,GAGxD,IAAIvU,EAAIqI,EAAa,EACjBiJ,EAAM,EACNkD,EAAM,EAEV,IADAnU,KAAKuF,EAAS5F,GAAa,IAAR0G,IACV1G,GAAK,IAAMsR,GAAO,MACrB5K,EAAQ,GAAa,IAAR8N,GAAsC,IAAzBnU,KAAKuF,EAAS5F,EAAI,KAC9CwU,EAAM,GAERnU,KAAKuF,EAAS5F,IAAO0G,EAAQ4K,GAAQ,GAAKkD,EAAM,IAGlD,OAAO5O,EAASyC,GAGlBjB,EAAOnG,UAAUyT,UAAY,SAAoBhO,EAAOd,EAAQmL,GAM9D,OALArK,GAASA,EACTd,KAAoB,EACfmL,GAAUR,EAASlQ,KAAMqG,EAAOd,EAAQ,EAAG,KAAO,KACnDc,EAAQ,IAAGA,EAAQ,IAAOA,EAAQ,GACtCrG,KAAKuF,GAAmB,IAARc,EACTd,EAAS,GAGlBwB,EAAOnG,UAAU0T,aAAe,SAAuBjO,EAAOd,EAAQmL,GAMpE,OALArK,GAASA,EACTd,KAAoB,EACfmL,GAAUR,EAASlQ,KAAMqG,EAAOd,EAAQ,EAAG,OAAS,OACzDvF,KAAKuF,GAAmB,IAARc,EAChBrG,KAAKuF,EAAS,GAAMc,IAAU,EACvBd,EAAS,GAGlBwB,EAAOnG,UAAU2T,aAAe,SAAuBlO,EAAOd,EAAQmL,GAMpE,OALArK,GAASA,EACTd,KAAoB,EACfmL,GAAUR,EAASlQ,KAAMqG,EAAOd,EAAQ,EAAG,OAAS,OACzDvF,KAAKuF,GAAWc,IAAU,EAC1BrG,KAAKuF,EAAS,GAAc,IAARc,EACbd,EAAS,GAGlBwB,EAAOnG,UAAU4T,aAAe,SAAuBnO,EAAOd,EAAQmL,GAQpE,OAPArK,GAASA,EACTd,KAAoB,EACfmL,GAAUR,EAASlQ,KAAMqG,EAAOd,EAAQ,EAAG,YAAa,YAC7DvF,KAAKuF,GAAmB,IAARc,EAChBrG,KAAKuF,EAAS,GAAMc,IAAU,EAC9BrG,KAAKuF,EAAS,GAAMc,IAAU,GAC9BrG,KAAKuF,EAAS,GAAMc,IAAU,GACvBd,EAAS,GAGlBwB,EAAOnG,UAAU6T,aAAe,SAAuBpO,EAAOd,EAAQmL,GASpE,OARArK,GAASA,EACTd,KAAoB,EACfmL,GAAUR,EAASlQ,KAAMqG,EAAOd,EAAQ,EAAG,YAAa,YACzDc,EAAQ,IAAGA,EAAQ,WAAaA,EAAQ,GAC5CrG,KAAKuF,GAAWc,IAAU,GAC1BrG,KAAKuF,EAAS,GAAMc,IAAU,GAC9BrG,KAAKuF,EAAS,GAAMc,IAAU,EAC9BrG,KAAKuF,EAAS,GAAc,IAARc,EACbd,EAAS,GAGlBwB,EAAOnG,UAAU8T,gBAAkB5C,GAAmB,SAA0BzL,EAAOd,EAAS,GAC9F,OAAO4K,EAAenQ,KAAMqG,EAAOd,GAAS8K,OAAO,sBAAuBA,OAAO,0BAGnFtJ,EAAOnG,UAAU+T,gBAAkB7C,GAAmB,SAA0BzL,EAAOd,EAAS,GAC9F,OAAO+K,EAAetQ,KAAMqG,EAAOd,GAAS8K,OAAO,sBAAuBA,OAAO,0BAkBnFtJ,EAAOnG,UAAUgU,aAAe,SAAuBvO,EAAOd,EAAQmL,GACpE,OAAOF,EAAWxQ,KAAMqG,EAAOd,GAAQ,EAAMmL,IAG/C3J,EAAOnG,UAAUiU,aAAe,SAAuBxO,EAAOd,EAAQmL,GACpE,OAAOF,EAAWxQ,KAAMqG,EAAOd,GAAQ,EAAOmL,IAahD3J,EAAOnG,UAAUkU,cAAgB,SAAwBzO,EAAOd,EAAQmL,GACtE,OAAOE,EAAY5Q,KAAMqG,EAAOd,GAAQ,EAAMmL,IAGhD3J,EAAOnG,UAAUmU,cAAgB,SAAwB1O,EAAOd,EAAQmL,GACtE,OAAOE,EAAY5Q,KAAMqG,EAAOd,GAAQ,EAAOmL,IAIjD3J,EAAOnG,UAAU0H,KAAO,SAAe8G,EAAQ4F,EAAa7P,EAAOC,GACjE,IAAK2B,EAAO+B,SAASsG,GAAS,MAAM,IAAIzH,UAAU,+BAQlD,GAPKxC,IAAOA,EAAQ,GACfC,GAAe,IAARA,IAAWA,EAAMpF,KAAKc,QAC9BkU,GAAe5F,EAAOtO,SAAQkU,EAAc5F,EAAOtO,QAClDkU,IAAaA,EAAc,GAC5B5P,EAAM,GAAKA,EAAMD,IAAOC,EAAMD,GAG9BC,IAAQD,EAAO,OAAO,EAC1B,GAAsB,IAAlBiK,EAAOtO,QAAgC,IAAhBd,KAAKc,OAAc,OAAO,EAGrD,GAAIkU,EAAc,EAChB,MAAM,IAAI3N,WAAW,6BAEvB,GAAIlC,EAAQ,GAAKA,GAASnF,KAAKc,OAAQ,MAAM,IAAIuG,WAAW,sBAC5D,GAAIjC,EAAM,EAAG,MAAM,IAAIiC,WAAW,2BAG9BjC,EAAMpF,KAAKc,SAAQsE,EAAMpF,KAAKc,QAC9BsO,EAAOtO,OAASkU,EAAc5P,EAAMD,IACtCC,EAAMgK,EAAOtO,OAASkU,EAAc7P,GAGtC,MAAMlG,EAAMmG,EAAMD,EAalB,OAXInF,OAASoP,GAAqD,mBAApC7O,WAAWK,UAAUqU,WAEjDjV,KAAKiV,WAAWD,EAAa7P,EAAOC,GAEpC7E,WAAWK,UAAU8N,IAAItL,KACvBgM,EACApP,KAAK8Q,SAAS3L,EAAOC,GACrB4P,GAIG/V,GAOT8H,EAAOnG,UAAUuN,KAAO,SAAe1D,EAAKtF,EAAOC,EAAK0C,GAEtD,GAAmB,iBAAR2C,EAAkB,CAS3B,GARqB,iBAAVtF,GACT2C,EAAW3C,EACXA,EAAQ,EACRC,EAAMpF,KAAKc,QACa,iBAARsE,IAChB0C,EAAW1C,EACXA,EAAMpF,KAAKc,aAEIkI,IAAblB,GAA8C,iBAAbA,EACnC,MAAM,IAAIH,UAAU,6BAEtB,GAAwB,iBAAbG,IAA0Bf,EAAOgB,WAAWD,GACrD,MAAM,IAAIH,UAAU,qBAAuBG,GAE7C,GAAmB,IAAf2C,EAAI3J,OAAc,CACpB,MAAMmE,EAAOwF,EAAIlG,WAAW,IACV,SAAbuD,GAAuB7C,EAAO,KAClB,WAAb6C,KAEF2C,EAAMxF,QAGc,iBAARwF,EAChBA,GAAY,IACY,kBAARA,IAChBA,EAAMa,OAAOb,IAIf,GAAItF,EAAQ,GAAKnF,KAAKc,OAASqE,GAASnF,KAAKc,OAASsE,EACpD,MAAM,IAAIiC,WAAW,sBAGvB,GAAIjC,GAAOD,EACT,OAAOnF,KAQT,IAAIL,EACJ,GANAwF,KAAkB,EAClBC,OAAc4D,IAAR5D,EAAoBpF,KAAKc,OAASsE,IAAQ,EAE3CqF,IAAKA,EAAM,GAGG,iBAARA,EACT,IAAK9K,EAAIwF,EAAOxF,EAAIyF,IAAOzF,EACzBK,KAAKL,GAAK8K,MAEP,CACL,MAAMsF,EAAQhJ,EAAO+B,SAAS2B,GAC1BA,EACA1D,EAAOlF,KAAK4I,EAAK3C,GACf7I,EAAM8Q,EAAMjP,OAClB,GAAY,IAAR7B,EACF,MAAM,IAAI0I,UAAU,cAAgB8C,EAClC,qCAEJ,IAAK9K,EAAI,EAAGA,EAAIyF,EAAMD,IAASxF,EAC7BK,KAAKL,EAAIwF,GAAS4K,EAAMpQ,EAAIV,GAIhC,OAAOe,MAOT,MAAMkV,EAAS,GACf,SAASC,EAAGC,EAAKC,EAAYC,GAC3BJ,EAAOE,GAAO,cAAwBE,EACpCxS,cACEyS,QAEAhO,OAAOwG,eAAe/N,KAAM,UAAW,CACrCqG,MAAOgP,EAAW/H,MAAMtN,KAAM0J,WAC9B8L,UAAU,EACVC,cAAc,IAIhBzV,KAAK+C,KAAO,GAAG/C,KAAK+C,SAASqS,KAG7BpV,KAAK0V,aAEE1V,KAAK+C,KAGVkC,WACF,OAAOmQ,EAGLnQ,SAAMoB,GACRkB,OAAOwG,eAAe/N,KAAM,OAAQ,CAClCyV,cAAc,EACdzH,YAAY,EACZ3H,MAAAA,EACAmP,UAAU,IAIdlS,WACE,MAAO,GAAGtD,KAAK+C,SAASqS,OAASpV,KAAK2V,YAkC5C,SAASC,EAAuBnL,GAC9B,IAAIkC,EAAM,GACNhN,EAAI8K,EAAI3J,OACZ,MAAMqE,EAAmB,MAAXsF,EAAI,GAAa,EAAI,EACnC,KAAO9K,GAAKwF,EAAQ,EAAGxF,GAAK,EAC1BgN,EAAM,IAAIlC,EAAIlH,MAAM5D,EAAI,EAAGA,KAAKgN,IAElC,MAAO,GAAGlC,EAAIlH,MAAM,EAAG5D,KAAKgN,IAa9B,SAASyD,EAAY/J,EAAOqG,EAAKuC,EAAK3H,EAAK/B,EAAQyC,GACjD,GAAI3B,EAAQ4I,GAAO5I,EAAQqG,EAAK,CAC9B,MAAMnC,EAAmB,iBAARmC,EAAmB,IAAM,GAC1C,IAAImJ,EAWJ,MARIA,EAFA7N,EAAa,EACH,IAAR0E,GAAaA,IAAQ2D,OAAO,GACtB,OAAO9F,YAAYA,QAA2B,GAAlBvC,EAAa,KAASuC,IAElD,SAASA,QAA2B,GAAlBvC,EAAa,GAAS,IAAIuC,iBACtB,GAAlBvC,EAAa,GAAS,IAAIuC,IAGhC,MAAMmC,IAAMnC,YAAY0E,IAAM1E,IAElC,IAAI2K,EAAOY,iBAAiB,QAASD,EAAOxP,IArBtD,SAAsBiB,EAAK/B,EAAQyC,GACjC+J,EAAexM,EAAQ,eACHyD,IAAhB1B,EAAI/B,SAAsDyD,IAA7B1B,EAAI/B,EAASyC,IAC5CkK,EAAY3M,EAAQ+B,EAAIxG,QAAUkH,EAAa,IAoBjD+N,CAAYzO,EAAK/B,EAAQyC,GAG3B,SAAS+J,EAAgB1L,EAAOtD,GAC9B,GAAqB,iBAAVsD,EACT,MAAM,IAAI6O,EAAOc,qBAAqBjT,EAAM,SAAUsD,GAI1D,SAAS6L,EAAa7L,EAAOvF,EAAQoI,GACnC,GAAI/C,KAAKM,MAAMJ,KAAWA,EAExB,MADA0L,EAAe1L,EAAO6C,GAChB,IAAIgM,EAAOY,iBAAiB5M,GAAQ,SAAU,aAAc7C,GAGpE,GAAIvF,EAAS,EACX,MAAM,IAAIoU,EAAOe,yBAGnB,MAAM,IAAIf,EAAOY,iBAAiB5M,GAAQ,SACR,MAAMA,EAAO,EAAI,YAAYpI,IAC7BuF,GAtFpC8O,EAAE,4BACA,SAAUpS,GACR,OAAIA,EACK,GAAGA,gCAGL,mDACNsE,YACL8N,EAAE,wBACA,SAAUpS,EAAMkF,GACd,MAAO,QAAQlF,4DAA+DkF,MAC7EN,WACLwN,EAAE,oBACA,SAAUpJ,EAAK8J,EAAOK,GACpB,IAAIC,EAAM,iBAAiBpK,sBACvBqK,EAAWF,EAWf,OAVI5K,OAAO+K,UAAUH,IAAU/P,KAAKI,IAAI2P,GAAS,GAAK,GACpDE,EAAWR,EAAsB5K,OAAOkL,IACd,iBAAVA,IAChBE,EAAWpL,OAAOkL,IACdA,EAAQ7F,OAAO,IAAMA,OAAO,KAAO6F,IAAU7F,OAAO,IAAMA,OAAO,QACnE+F,EAAWR,EAAsBQ,IAEnCA,GAAY,KAEdD,GAAO,eAAeN,eAAmBO,IAClCD,IACN9O,YAiEL,MAAMiP,EAAoB,oBAgB1B,SAAS1M,EAAa/B,EAAQuE,GAE5B,IAAIS,EADJT,EAAQA,GAASlG,EAAAA,EAEjB,MAAMpF,EAAS+G,EAAO/G,OACtB,IAAIyV,EAAgB,KACpB,MAAMxG,EAAQ,GAEd,IAAK,IAAIpQ,EAAI,EAAGA,EAAImB,IAAUnB,EAAG,CAI/B,GAHAkN,EAAYhF,EAAOtD,WAAW5E,GAG1BkN,EAAY,OAAUA,EAAY,MAAQ,CAE5C,IAAK0J,EAAe,CAElB,GAAI1J,EAAY,MAAQ,EAEjBT,GAAS,IAAM,GAAG2D,EAAMjL,KAAK,IAAM,IAAM,KAC9C,SACK,GAAInF,EAAI,IAAMmB,EAAQ,EAEtBsL,GAAS,IAAM,GAAG2D,EAAMjL,KAAK,IAAM,IAAM,KAC9C,SAIFyR,EAAgB1J,EAEhB,SAIF,GAAIA,EAAY,MAAQ,EACjBT,GAAS,IAAM,GAAG2D,EAAMjL,KAAK,IAAM,IAAM,KAC9CyR,EAAgB1J,EAChB,SAIFA,EAAkE,OAArD0J,EAAgB,OAAU,GAAK1J,EAAY,YAC/C0J,IAEJnK,GAAS,IAAM,GAAG2D,EAAMjL,KAAK,IAAM,IAAM,KAMhD,GAHAyR,EAAgB,KAGZ1J,EAAY,IAAM,CACpB,IAAKT,GAAS,GAAK,EAAG,MACtB2D,EAAMjL,KAAK+H,QACN,GAAIA,EAAY,KAAO,CAC5B,IAAKT,GAAS,GAAK,EAAG,MACtB2D,EAAMjL,KACJ+H,GAAa,EAAM,IACP,GAAZA,EAAmB,UAEhB,GAAIA,EAAY,MAAS,CAC9B,IAAKT,GAAS,GAAK,EAAG,MACtB2D,EAAMjL,KACJ+H,GAAa,GAAM,IACnBA,GAAa,EAAM,GAAO,IACd,GAAZA,EAAmB,SAEhB,CAAA,KAAIA,EAAY,SASrB,MAAM,IAAI3L,MAAM,sBARhB,IAAKkL,GAAS,GAAK,EAAG,MACtB2D,EAAMjL,KACJ+H,GAAa,GAAO,IACpBA,GAAa,GAAM,GAAO,IAC1BA,GAAa,EAAM,GAAO,IACd,GAAZA,EAAmB,MAOzB,OAAOkD,EA4BT,SAASlG,EAAekC,GACtB,OAAOS,EAAOgK,YAxHhB,SAAsBzK,GAMpB,IAFAA,GAFAA,EAAMA,EAAI0K,MAAM,KAAK,IAEXtH,OAAOD,QAAQoH,EAAmB,KAEpCxV,OAAS,EAAG,MAAO,GAE3B,KAAOiL,EAAIjL,OAAS,GAAM,GACxBiL,GAAY,IAEd,OAAOA,EA6GmB2K,CAAY3K,IAGxC,SAASF,EAAY8K,EAAKC,EAAKrR,EAAQzE,GACrC,IAAInB,EACJ,IAAKA,EAAI,EAAGA,EAAImB,KACTnB,EAAI4F,GAAUqR,EAAI9V,QAAYnB,GAAKgX,EAAI7V,UADpBnB,EAExBiX,EAAIjX,EAAI4F,GAAUoR,EAAIhX,GAExB,OAAOA,EAMT,SAAS0I,EAAYQ,EAAKK,GACxB,OAAOL,aAAeK,GACZ,MAAPL,GAAkC,MAAnBA,EAAI/F,aAA+C,MAAxB+F,EAAI/F,YAAYC,MACzD8F,EAAI/F,YAAYC,OAASmG,EAAKnG,KAEpC,SAASkG,EAAaJ,GAEpB,OAAOA,GAAQA,EAKjB,MAAMiH,EAAsB,WAC1B,MAAM+G,EAAW,mBACXC,EAAQ,IAAI5T,MAAM,KACxB,IAAK,IAAIvD,EAAI,EAAGA,EAAI,KAAMA,EAAG,CAC3B,MAAMoX,EAAU,GAAJpX,EACZ,IAAK,IAAIC,EAAI,EAAGA,EAAI,KAAMA,EACxBkX,EAAMC,EAAMnX,GAAKiX,EAASlX,GAAKkX,EAASjX,GAG5C,OAAOkX,EATmB,GAa5B,SAAShF,EAAoBkF,GAC3B,MAAyB,oBAAX3G,OAAyB4G,EAAyBD,EAGlE,SAASC,IACP,MAAM,IAAI/V,MAAM,sDCtjEF,IAAIqB,YACJ,IAAIC,YCKR,MAACF,EAAU,IAAIC,YACd2U,EAAU,IAAI1U,YAE3B,IAAI2U,EAGAC,GAAS,EACb,IACIA,EAA4D,qBAAnD7P,OAAO3G,UAAU0C,SAASF,KAAKiU,OAAOC,SACjD,MAAOhY,IAET,IACQ8X,EAEAG,OAAO,UAAUC,MAAKC,IAElBN,EAAYM,EAAOC,UACnBC,OAM4B,mBAAlBC,eACdT,EAAYU,KAAKJ,OACjB5J,QAAQnH,IAAI,oBACZiR,KAC2B,oBAAbG,WACdX,EAAYY,OAAON,OACnB5J,QAAQnH,IAAI,iBACZiR,KAGN,MAAO7J,GACLD,QAAQnH,IAAI,aAAcoH,GAIvB,SAAS6J,IACZ,GAAgC,iBAArBR,EAAUa,OAEjB,OADAnK,QAAQnH,IAAI,+BACL,0DACJ,CACHmH,QAAQnH,IAAI,mBACZ,IAAIuR,EAAOd,EAAUe,gBAAgB,IAAI3X,WAAW,KACpDsN,QAAQnH,IAAI,uBAAwBuR,GAEpCd,EAAUa,OAAOtW,OAAO,UAAWuW,GAAMT,MAAKvU,IAC1C,IAAIkV,EAAQC,EAAQnV,GAChBoV,EAAQ5V,EAAOO,IAAIiV,GAIvB,GAHApK,QAAQnH,IAAI,8BACZmH,QAAQnH,IAAI,4BAA6ByR,GACzCtK,QAAQnH,IAAI,iBAAkB2R,GAC1BF,IAAUE,EAGV,MAAM,IAAInX,MAAM,wBAFhB2M,QAAQnH,IAAI,0BAMpB,IAAIiP,EAAUyC,EAAQH,EAAK3X,QAE3B6W,EAAUa,OAAOtW,OAAO,UAAWY,EAAQK,OAAOgT,IAAU6B,MAAKvU,IAC7D,IAAIkV,EAAQC,EAAQnV,GAChBoV,EAAQ5V,EAAOO,IAAI2S,GAIvB,GAHA9H,QAAQnH,IAAI,8BACZmH,QAAQnH,IAAI,4BAA6ByR,GACzCtK,QAAQnH,IAAI,iBAAkB2R,GAC1BF,IAAUE,EAGV,MAAM,IAAInX,MAAM,wBAFhB2M,QAAQnH,IAAI,2BAsC5B,MAAM4R,GAA0B,GAA1BA,GAAqC,GAArCA,GAAkD,EAAlDA,GAA8D,EAC7D,SAASC,EAAWpC,EAAKpU,EAAKyW,EAAS,IAC1C,MAAMC,EAAYnW,EAAQK,OAAOwT,GAC3BuC,EAAaD,EAAUzQ,WACvB2Q,EAAUxB,EAAUe,gBAAgB,IAAI3X,WAAW,KAEnDqY,EAAaF,EAAahN,SAASyL,EAAUe,gBAAgB,IAAI3X,WAAW,IAAI,GAAK,GAE3F,GAAIqY,EAAa,MAEb,OADA/K,QAAQnH,IAAI,iGACL,GAEX,GAAI8R,EAAS,GAET,OADA3K,QAAQnH,IAAI,gCACL,GAKX,MAAMmS,EAAoB,IAAItY,WAAWqY,GACzCC,EAAkBnK,IAAI+J,GACtB,MAAMK,EAAUV,EAAQO,EAAQrY,QAC1ByY,EAAe,IAAIxY,WAAWyY,EAAWF,EAAU/W,EAAKoE,KAAKC,IAAI,EAAGoS,KAE1E,IAAI/U,EAAOhB,EAAOgB,KAAKsV,EAAcN,GAErCQ,EAAUJ,EAAmBE,EAAc,GAC3C,MAAMG,EAAe,IAAI3Y,WAAWsY,EAAkB7Q,WAAavE,EAAKuE,WAAa2Q,EAAQ3Q,WAAa,GAC1GkR,EAAaxK,IAAImK,GAEjBK,EAAaxK,IAAIjL,EAAMyV,EAAalR,WAAasQ,GACjDY,EAAaxK,IAAIiK,EAASO,EAAalR,WAAasQ,GACpDY,EAAaA,EAAalR,WAAasQ,GAAiBE,EAGxD,OAFW,IAAIW,SAASD,EAAa5Y,QAClC8Y,UAAUF,EAAalR,WAAasQ,EAAeO,EAAkB7Q,YACjEqR,EAAS5M,cAAcyM,GAK3B,SAASI,EAAWC,EAAQxX,GAC/B,MAAMyX,EAAcH,EAAS7C,YAAY+C,GACnCE,EAAK,IAAIN,SAASK,EAAYlZ,QAC9BoZ,EAASD,EAAGE,UAAUH,EAAYxR,WAAasQ,GAC/CsB,EAAoBJ,EAAYjW,MAAM,EAAGmW,GACzCf,EAAUa,EAAYjW,MAAM+U,EAAaA,GACzCuB,EAAWL,EAAYjW,MAAM+U,EAAaA,GAE1CE,EAASiB,EAAGK,SAASN,EAAYxR,WAAasQ,GACpD,GAAIE,EAAS,GAET,OADA3K,QAAQnH,IAAI,4BAA8B8R,GACnC,mBAEX,MAAMM,EAAUV,EAAQO,EAAQrY,QAC1ByY,EAAe,IAAIxY,WAAWyY,EAAWF,EAAU/W,EAAKoE,KAAKC,IAAI,EAAGoS,KAC1ES,EAAUW,EAAmBb,EAAc,GAC3C,MAAMgB,EAAgBH,EAAkBrW,MAAM,EAAGqW,EAAkB1U,QAAQ,IAI3E,IAAK8U,EAFMvX,EAAOgB,KAAKsV,EAAcgB,GAEpBF,GAAW,MAAO,SAGnC,OAFY3C,EAAQ+C,OAAOF,GAKxB,SAAS3B,EAAQ9X,GAAU,OAAO4C,MAAMtC,UAAUuC,IAAIC,KAAK,IAAI7C,WAAWD,IAAS+C,IAAM,KAAOA,EAAEC,SAAS,KAAKC,OAAO,KAAIC,KAAK,IAGhI,SAASyV,EAAUjY,EAAMe,EAAKmY,EAAgB,GAEjD,IAAIC,EACJ,GAAIpY,MAAAA,GAA6C,KAARA,EACrC,KAAM,wCACH,GAAIA,EAAIe,cAAgBF,YAC3BuX,EAAY,IAAI5Z,WAAWwB,QACxB,GAAmB,iBAARA,EACdoY,EAAY,IAAI5Z,WAAWkC,EAAOC,YAAYX,QAE3C,CAAA,IAAIa,YAAYC,OAAOd,GAO1B,MAAM,IAAIb,MAAM,6BANhB,GAA6B,eAAzBa,EAAIe,YAAYC,KAGhB,MAAM,IAAI7B,MAAM,kBAFhBiZ,EAAYpY,EAWpB,GAA4B,IAAxBoY,EAAUnS,WACV,KAAM,qDAIV,GAAoB,iBAAThH,EACPA,EAAOsB,EAAQK,OAAO3B,QACnB,GAAI4B,YAAYC,OAAO7B,IAC1B,GAA8B,eAA1BA,EAAK8B,YAAYC,KAEjB,MAAM,IAAI7B,MAAM,sBAEjB,CAAA,GAAIF,EAAK8B,cAAgBF,YAG5B,MAAM,IAAI1B,MAAM,yBAFhBF,EAAO,IAAIT,WAAWS,GAM1B,MAAMoZ,EAAkB,IAAIzb,YAAY,GAClC0b,EAAe,IAAI1b,YAAYwb,EAAU7Z,QAC/C8Z,EAAgB1L,IAAI2L,GACpBD,EAAgB,GAAKF,EACrB,MAAMxU,EAAS1E,EAAKgH,WACdsS,EAASnU,KAAKoU,KAAK7U,EAAS,IAC5B8U,EAAWF,EAAS,EACpBG,EAAW/U,EAAS,GACpBgV,EAAWvU,KAAKM,MAAMf,EAAS,GAI/BiV,EAAQ,IAAIhc,YAAYqC,EAAKV,OAAQU,EAAKwH,WAAYkS,GAE5D,IAAK,IAAI/a,EAAI,EAAGA,EAAI2a,EAAQ3a,IAAK,CAG7Bya,EAAgB,KAChB,MAAMQ,EAAOnY,EAAOC,YAAY0X,EAAgB9Z,QAC1Cua,EAAS,IAAIlc,YAAYic,GAE/B,GAAIjb,GAAK6a,GAAwB,GAAZC,EAAe,CAChC,MAAMK,EAAQ,IAAIva,WAAWqa,GAC7B,IAAK,IAAIG,EAAIrV,EAAS+U,EAAUO,EAAI,EAAGA,EAAIP,EAAUO,IAEjDha,EAAK+Z,MAAQD,EAAME,QAGvB,IAAK,IAAIC,EAAK,EAAGA,EAAK,EAAGA,IAAMN,EAAU,EAAJhb,EAAQsb,IAAOJ,EAAOI,GAKnE,OAAOja,EAIJ,SAASgZ,EAAMkB,EAAMC,GACxB,GAAGD,EAAKlT,YAAcmT,EAAKnT,WAAa,OAAO,EAC/C,IAAI,IAAIrI,EAAI,EAAIA,EAAIub,EAAKlT,WAAYrI,IACnC,GAAGub,EAAKvb,IAAMwb,EAAKxb,GAAK,OAAO,EAGjC,OAAO,EAUJ,SAASqZ,EAAWoC,EAAS7Q,GAChC,IAAI8Q,EAAU5Y,EAAOC,YAAY0Y,GACjC,IAAK,IAAIzb,EAAI,EAAGA,EAAI4K,EAAG5K,IAAK0b,EAAU5Y,EAAOC,YAAY2Y,GACzD,OAAOA"}